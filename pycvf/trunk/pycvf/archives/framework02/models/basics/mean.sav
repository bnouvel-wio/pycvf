# -*- coding: utf-8 -*-
#########################################################################################################################################
#
# MyModel By Bertrand NOUVEL
# 2009 CNRS Postdoctorate JFLI
#
# (c) All rights reserved
# ###############################################
#
################################################################################################################################################################################
# Includes
################################################################################################################################################################################

#########################################################################################################################################
# Define our model
#########################################################################################################################################

import scipy
from jfli.models import genericmodel
from jfli.models.datatypes import basics

def domean(src):
  if (hasattr(src,"mean")):
     return src.mean(axis=0)
  if (hasattr(src,"step")):
     src.rewind()
     class Summer:
       def __init__(self):
         self.x=0
       def step(self,x):
         self.x+=1
     s=Summer()
     src.set_observer(s)
     src.run()
     return s.x
  else:
    print "src=", (type(src))
    return scipy.mean(src)

class MyModel(genericmodel.GenericModel):
  datatype=lambda self,x:basics.FloatDatatype
  def init_featurefilter(self):
     self.featurefilter=('src|domean'  ,{'domean':domean},  {}) 



