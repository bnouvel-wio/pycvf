/* Generated by Cython 0.11.2 on Wed Jan 13 19:52:23 2010 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#include "structmember.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
       void *buf;
       PyObject *obj;
       Py_ssize_t len;
       Py_ssize_t itemsize;
       int readonly;
       int ndim;
       char *format;
       Py_ssize_t *shape;
       Py_ssize_t *strides;
       Py_ssize_t *suboffsets;
       void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyString_Type                PyBytes_Type
  #define PyString_CheckExact          PyBytes_CheckExact
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define PyBytes_Type                 PyString_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) PyInstanceMethod_New(func)
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#else
  #define _USE_MATH_DEFINES
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif
#include <math.h>
#define __PYX_HAVE_API__pysash
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "DistData.h"
#include "DenseVecData.h"
#include "Sash.h"
#include "PythonVecData.h"
#define __PYX_USE_C99_COMPLEX defined(_Complex_I)


#ifdef __GNUC__
#define INLINE __inline__
#elif _WIN32
#define INLINE __inline
#else
#define INLINE 
#endif

typedef struct {PyObject **p; char *s; long n; char is_unicode; char intern; char is_identifier;} __Pyx_StringTabEntry; /*proto*/



static int __pyx_skip_dispatch = 0;


/* Type Conversion Predeclarations */

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyBytes_FromString          PyString_FromString
#define __Pyx_PyBytes_FromStringAndSize   PyString_FromStringAndSize
#define __Pyx_PyBytes_AsString            PyString_AsString
#else
#define __Pyx_PyBytes_FromString          PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize   PyBytes_FromStringAndSize
#define __Pyx_PyBytes_AsString            PyBytes_AsString
#endif

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

#if !defined(T_PYSSIZET)
#if PY_VERSION_HEX < 0x02050000
#define T_PYSSIZET T_INT
#elif !defined(T_LONGLONG)
#define T_PYSSIZET \
        ((sizeof(Py_ssize_t) == sizeof(int))  ? T_INT  : \
        ((sizeof(Py_ssize_t) == sizeof(long)) ? T_LONG : -1))
#else
#define T_PYSSIZET \
        ((sizeof(Py_ssize_t) == sizeof(int))          ? T_INT      : \
        ((sizeof(Py_ssize_t) == sizeof(long))         ? T_LONG     : \
        ((sizeof(Py_ssize_t) == sizeof(PY_LONG_LONG)) ? T_LONGLONG : -1)))
#endif
#endif

#if !defined(T_SIZET)
#if !defined(T_ULONGLONG)
#define T_SIZET \
        ((sizeof(size_t) == sizeof(unsigned int))  ? T_UINT  : \
        ((sizeof(size_t) == sizeof(unsigned long)) ? T_ULONG : -1))
#else
#define T_SIZET \
        ((sizeof(size_t) == sizeof(unsigned int))          ? T_UINT      : \
        ((sizeof(size_t) == sizeof(unsigned long))         ? T_ULONG     : \
        ((sizeof(size_t) == sizeof(unsigned PY_LONG_LONG)) ? T_ULONGLONG : -1)))
#endif
#endif

static INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 ||               (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)) 
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;
static const char **__pyx_f;

static char __pyx_mdoc[] = "\n// Implementation of the SASH index for approximate similarity search,\n// as described in \n//   Michael E. Houle (author),\n//   \"SASH: a Spatial Approximation Sample Hierarchy for Similarity Search\",\n//   IBM Tokyo Research Laboratory Technical Report RT-0517, 5 March 2003.\n// and\n//   Michael E. Houle and Jun Sakuma (authors),\n//   \"Fast Approximate Search in Extremely High-Dimensional Data Sets\",\n//   in Proc. 21st International Conference on Data Engineering (ICDE 2005),\n//   Tokyo, Japan, April 2005, pp. 619-630.\n//\n// Copyright (C) 2004-2006 Michael E. Houle,\n// All rights reserved.\n//\n// Python Wrapper by Bertrand NOUVEL (CNRS-JFLI) 2009\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n//\n// 1. The source code and derived binary forms may be used only for\n//    non-commercial, non-profit research purposes.\n//\n// 2. Redistributions of source code must retain the above copyright\n//    notice, these conditions, and the following disclaimer.\n//\n// 3. Redistributions in binary form must reproduce the above copyright\n//    notice, these conditions, and the following disclaimer in the\n//    documentation and/or other materials provided with the distribution.\n//\n// 4. The names of its contributors may not be used to endorse or promote\n//    products derived from this software without specific prior written\n//    permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER\n// OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Comments, bug fixes, etc welcome!\n// Contact e-mail address: meh@nii.ac.jp, meh@acm.org\n";


#ifdef CYTHON_REFNANNY
typedef struct {
  void (*INCREF)(void*, PyObject*, int);
  void (*DECREF)(void*, PyObject*, int);
  void (*GOTREF)(void*, PyObject*, int);
  void (*GIVEREF)(void*, PyObject*, int);
  void* (*NewContext)(const char*, int, const char*);
  void (*FinishContext)(void**);
} __Pyx_RefnannyAPIStruct;
static __Pyx_RefnannyAPIStruct *__Pyx_Refnanny = NULL;
#define __Pyx_ImportRefcountAPI(name)   (__Pyx_RefnannyAPIStruct *) PyCObject_Import((char *)name, (char *)"RefnannyAPI")
#define __Pyx_INCREF(r) __Pyx_Refnanny->INCREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_DECREF(r) __Pyx_Refnanny->DECREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_GOTREF(r) __Pyx_Refnanny->GOTREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_GIVEREF(r) __Pyx_Refnanny->GIVEREF(__pyx_refchk, (PyObject *)(r), __LINE__)
#define __Pyx_XDECREF(r) if((r) == NULL) ; else __Pyx_DECREF(r)
#define __Pyx_SetupRefcountContext(name)   void* __pyx_refchk = __Pyx_Refnanny->NewContext((name), __LINE__, __FILE__)
#define __Pyx_FinishRefcountContext()   __Pyx_Refnanny->FinishContext(&__pyx_refchk)
#else
#define __Pyx_INCREF(r) Py_INCREF(r)
#define __Pyx_DECREF(r) Py_DECREF(r)
#define __Pyx_GOTREF(r)
#define __Pyx_GIVEREF(r)
#define __Pyx_XDECREF(r) Py_XDECREF(r)
#define __Pyx_SetupRefcountContext(name)
#define __Pyx_FinishRefcountContext()
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) if((r) == NULL) ; else __Pyx_GIVEREF(r)
#define __Pyx_XGOTREF(r) if((r) == NULL) ; else __Pyx_GOTREF(r)

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/


static INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) ((size <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i, size <= sizeof(long)) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int fits_long) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, fits_long ? PyInt_FromLong(i) : PyLong_FromLongLong(i));
    }
    return r;
}

static int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (PyList_Append(L, x) < 0) return NULL;
        Py_INCREF(Py_None);
        return Py_None; /* this is just to have an accurate signature */
    }
    else {
        PyObject *r, *m;
        m = __Pyx_GetAttrString(L, "append");
        if (!m) return NULL;
        r = PyObject_CallFunctionObjArgs(m, x, NULL);
        Py_DECREF(m);
        return r;
    }
}

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

#if __PYX_USE_C99_COMPLEX
    #define __Pyx_REAL_PART(z) __real__(z)
    #define __Pyx_IMAG_PART(z) __imag__(z)
#else
    #define __Pyx_REAL_PART(z) ((z).real)
    #define __Pyx_IMAG_PART(z) ((z).imag)
#endif

#define __pyx_PyObject_from_complex(z) PyComplex_FromDoubles((double)__Pyx_REAL_PART(z), (double)__Pyx_IMAG_PART(z))

#if __PYX_USE_C99_COMPLEX

    typedef float _Complex __pyx_t_float_complex;
    static INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
    
    #define __pyx_t_float_complex_is_zero(a) ((a) == 0)
    #define __pyx_t_float_complex_eq(a, b) ((a) == (b))
    #define __pyx_t_float_complex_add(a, b) ((a)+(b))
    #define __pyx_t_float_complex_sub(a, b) ((a)-(b))
    #define __pyx_t_float_complex_mul(a, b) ((a)*(b))
    #define __pyx_t_float_complex_div(a, b) ((a)/(b))
    #define __pyx_t_float_complex_neg(a) (-(a))

#else

    typedef struct { float real, imag; } __pyx_t_float_complex;
    static INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex c; c.real = x; c.imag = y; return c;
    }
    
    static INLINE int __pyx_t_float_complex_is_zero(__pyx_t_float_complex a) {
       return (a.real == 0) & (a.imag == 0);
    }

    static INLINE int __pyx_t_float_complex_eq(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) & (a.imag == b.imag);
    }

    static INLINE __pyx_t_float_complex __pyx_t_float_complex_add(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }

    static INLINE __pyx_t_float_complex __pyx_t_float_complex_sub(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }

    static INLINE __pyx_t_float_complex __pyx_t_float_complex_mul(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }

    static INLINE __pyx_t_float_complex __pyx_t_float_complex_div(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real*b.real + b.imag*b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }

    static INLINE __pyx_t_float_complex __pyx_t_float_complex_neg(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }

#endif

#if __PYX_USE_C99_COMPLEX

    typedef double _Complex __pyx_t_double_complex;
    static INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
    
    #define __pyx_t_double_complex_is_zero(a) ((a) == 0)
    #define __pyx_t_double_complex_eq(a, b) ((a) == (b))
    #define __pyx_t_double_complex_add(a, b) ((a)+(b))
    #define __pyx_t_double_complex_sub(a, b) ((a)-(b))
    #define __pyx_t_double_complex_mul(a, b) ((a)*(b))
    #define __pyx_t_double_complex_div(a, b) ((a)/(b))
    #define __pyx_t_double_complex_neg(a) (-(a))

#else

    typedef struct { double real, imag; } __pyx_t_double_complex;
    static INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex c; c.real = x; c.imag = y; return c;
    }
    
    static INLINE int __pyx_t_double_complex_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) & (a.imag == 0);
    }

    static INLINE int __pyx_t_double_complex_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) & (a.imag == b.imag);
    }

    static INLINE __pyx_t_double_complex __pyx_t_double_complex_add(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }

    static INLINE __pyx_t_double_complex __pyx_t_double_complex_sub(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }

    static INLINE __pyx_t_double_complex __pyx_t_double_complex_mul(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }

    static INLINE __pyx_t_double_complex __pyx_t_double_complex_div(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real*b.real + b.imag*b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }

    static INLINE __pyx_t_double_complex __pyx_t_double_complex_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }

#endif

#if __PYX_USE_C99_COMPLEX

    typedef long double _Complex __pyx_t_long__double_complex;
    static INLINE __pyx_t_long__double_complex __pyx_t_long__double_complex_from_parts(long double x, long double y) {
      return x + y*(__pyx_t_long__double_complex)_Complex_I;
    }
    
    #define __pyx_t_long__double_complex_is_zero(a) ((a) == 0)
    #define __pyx_t_long__double_complex_eq(a, b) ((a) == (b))
    #define __pyx_t_long__double_complex_add(a, b) ((a)+(b))
    #define __pyx_t_long__double_complex_sub(a, b) ((a)-(b))
    #define __pyx_t_long__double_complex_mul(a, b) ((a)*(b))
    #define __pyx_t_long__double_complex_div(a, b) ((a)/(b))
    #define __pyx_t_long__double_complex_neg(a) (-(a))

#else

    typedef struct { long double real, imag; } __pyx_t_long__double_complex;
    static INLINE __pyx_t_long__double_complex __pyx_t_long__double_complex_from_parts(long double x, long double y) {
      __pyx_t_long__double_complex c; c.real = x; c.imag = y; return c;
    }
    
    static INLINE int __pyx_t_long__double_complex_is_zero(__pyx_t_long__double_complex a) {
       return (a.real == 0) & (a.imag == 0);
    }

    static INLINE int __pyx_t_long__double_complex_eq(__pyx_t_long__double_complex a, __pyx_t_long__double_complex b) {
       return (a.real == b.real) & (a.imag == b.imag);
    }

    static INLINE __pyx_t_long__double_complex __pyx_t_long__double_complex_add(__pyx_t_long__double_complex a, __pyx_t_long__double_complex b) {
        __pyx_t_long__double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }

    static INLINE __pyx_t_long__double_complex __pyx_t_long__double_complex_sub(__pyx_t_long__double_complex a, __pyx_t_long__double_complex b) {
        __pyx_t_long__double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }

    static INLINE __pyx_t_long__double_complex __pyx_t_long__double_complex_mul(__pyx_t_long__double_complex a, __pyx_t_long__double_complex b) {
        __pyx_t_long__double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }

    static INLINE __pyx_t_long__double_complex __pyx_t_long__double_complex_div(__pyx_t_long__double_complex a, __pyx_t_long__double_complex b) {
        __pyx_t_long__double_complex z;
        long double denom = b.real*b.real + b.imag*b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }

    static INLINE __pyx_t_long__double_complex __pyx_t_long__double_complex_neg(__pyx_t_long__double_complex a) {
        __pyx_t_long__double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }

#endif

static INLINE int __Pyx_StrEq(const char *, const char *); /*proto*/

static INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static INLINE char __Pyx_PyInt_AsChar(PyObject *);

static INLINE short __Pyx_PyInt_AsShort(PyObject *);

static INLINE int __Pyx_PyInt_AsInt(PyObject *);

static INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static INLINE long __Pyx_PyInt_AsLong(PyObject *);

static INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, long size);  /*proto*/

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Type declarations */

typedef npy_int8 __pyx_t_5numpy_int8_t;

typedef npy_int16 __pyx_t_5numpy_int16_t;

typedef npy_int32 __pyx_t_5numpy_int32_t;

typedef npy_int64 __pyx_t_5numpy_int64_t;

typedef npy_uint8 __pyx_t_5numpy_uint8_t;

typedef npy_uint16 __pyx_t_5numpy_uint16_t;

typedef npy_uint32 __pyx_t_5numpy_uint32_t;

typedef npy_uint64 __pyx_t_5numpy_uint64_t;

typedef npy_float32 __pyx_t_5numpy_float32_t;

typedef npy_float64 __pyx_t_5numpy_float64_t;

typedef npy_complex64 __pyx_t_5numpy_complex64_t;

typedef npy_complex128 __pyx_t_5numpy_complex128_t;

typedef npy_long __pyx_t_5numpy_int_t;

typedef npy_longlong __pyx_t_5numpy_long_t;

typedef npy_ulong __pyx_t_5numpy_uint_t;

typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

typedef npy_double __pyx_t_5numpy_float_t;

typedef npy_double __pyx_t_5numpy_double_t;

typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

typedef npy_cdouble __pyx_t_5numpy_complex_t;

typedef float (*__pyx_t_6pysash_distance_f)(void *, void *, void *);

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":141
 * 
 * 
 * cdef class SashInputArray(object):             # <<<<<<<<<<<<<<
 *   cdef DistData ** data
 *   cdef int numItems
 */

struct __pyx_obj_6pysash_SashInputArray {
  PyObject_HEAD
  DistData **data;
  int numItems;
};

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":227
 *     free(self.data)
 * 
 * cdef class Sash(object):             # <<<<<<<<<<<<<<
 *   cdef c_Sash * sashinstance
 *   def __init__(int self,seed=0):
 */

struct __pyx_obj_6pysash_Sash {
  PyObject_HEAD
  Sash *sashinstance;
};

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":438
 * #####
 * 
 * cdef class GenericSash(Sash):             # <<<<<<<<<<<<<<
 *   cdef object distance
 *   cdef object persistent_data
 */

struct __pyx_obj_6pysash_GenericSash {
  struct __pyx_obj_6pysash_Sash __pyx_base;
  PyObject *distance;
  PyObject *persistent_data;
};

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":186
 * #  (<object>f)(name)
 * 
 * cdef class WContainer:#(object):             # <<<<<<<<<<<<<<
 *   cdef object value
 *   def __init__(self,value):
 */

struct __pyx_obj_6pysash_WContainer {
  PyObject_HEAD
  PyObject *value;
};

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":210
 * 
 * 
 * cdef class SashInputArrayPython(object):             # <<<<<<<<<<<<<<
 *   cdef DistData ** data
 *   cdef int numItems
 */

struct __pyx_obj_6pysash_SashInputArrayPython {
  PyObject_HEAD
  DistData **data;
  int numItems;
  PyObject *container_objlist;
};

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":200
 * 
 * 
 * cdef class SashInputVecPython(object):             # <<<<<<<<<<<<<<
 *   cdef DistData * data
 *   cdef object container_obj
 */

struct __pyx_obj_6pysash_SashInputVecPython {
  PyObject_HEAD
  DistData *data;
  PyObject *container_obj;
};

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":127
 * ###
 * 
 * cdef class SashInputVec(object):             # <<<<<<<<<<<<<<
 *   cdef DistData * data
 *   def __init__(self,arr):
 */

struct __pyx_obj_6pysash_SashInputVec {
  PyObject_HEAD
  DistData *data;
};
/* Module declarations from python_buffer */

/* Module declarations from stdlib */

/* Module declarations from numpy */

/* Module declarations from numpy */

static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/
/* Module declarations from pysash */

static PyTypeObject *__pyx_ptype_6pysash_SashInputVec = 0;
static PyTypeObject *__pyx_ptype_6pysash_SashInputArray = 0;
static PyTypeObject *__pyx_ptype_6pysash_WContainer = 0;
static PyTypeObject *__pyx_ptype_6pysash_SashInputVecPython = 0;
static PyTypeObject *__pyx_ptype_6pysash_SashInputArrayPython = 0;
static PyTypeObject *__pyx_ptype_6pysash_Sash = 0;
static PyTypeObject *__pyx_ptype_6pysash_GenericSash = 0;
static float __pyx_f_6pysash_generic_distance_callback(void *, void *, void *); /*proto*/
#define __Pyx_MODULE_NAME "pysash"
int __pyx_module_is_main_pysash = 0;

/* Implementation of pysash */
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static char __pyx_k___main__[] = "__main__";
static PyObject *__pyx_kp___main__;
static char __pyx_k___init__[] = "__init__";
static PyObject *__pyx_kp___init__;
static char __pyx_k___del__[] = "__del__";
static PyObject *__pyx_kp___del__;
static char __pyx_k___repr__[] = "__repr__";
static PyObject *__pyx_kp___repr__;
static char __pyx_k___str__[] = "__str__";
static PyObject *__pyx_kp___str__;
static char __pyx_k__build[] = "_build";
static PyObject *__pyx_kp__build;
static char __pyx_k_build[] = "build";
static PyObject *__pyx_kp_build;
static char __pyx_k__findAllInBall[] = "_findAllInBall";
static PyObject *__pyx_kp__findAllInBall;
static char __pyx_k_findAllInBall[] = "findAllInBall";
static PyObject *__pyx_kp_findAllInBall;
static char __pyx_k__findMostInBall[] = "_findMostInBall";
static PyObject *__pyx_kp__findMostInBall;
static char __pyx_k_findMostInBall[] = "findMostInBall";
static PyObject *__pyx_kp_findMostInBall;
static char __pyx_k__findNearest[] = "_findNearest";
static PyObject *__pyx_kp__findNearest;
static char __pyx_k_findNearest[] = "findNearest";
static PyObject *__pyx_kp_findNearest;
static char __pyx_k__findNear[] = "_findNear";
static PyObject *__pyx_kp__findNear;
static char __pyx_k_findNear[] = "findNear";
static PyObject *__pyx_kp_findNear;
static char __pyx_k_getMaxParents[] = "getMaxParents";
static PyObject *__pyx_kp_getMaxParents;
static char __pyx_k_getNumItems[] = "getNumItems";
static PyObject *__pyx_kp_getNumItems;
static char __pyx_k_getNumLevels[] = "getNumLevels";
static PyObject *__pyx_kp_getNumLevels;
static char __pyx_k_getNumOrphans[] = "getNumOrphans";
static PyObject *__pyx_kp_getNumOrphans;
static char __pyx_k_getResultAcc[] = "getResultAcc";
static PyObject *__pyx_kp_getResultAcc;
static char __pyx_k_getResultDists[] = "getResultDists";
static PyObject *__pyx_kp_getResultDists;
static char __pyx_k_getResultDistComps[] = "getResultDistComps";
static PyObject *__pyx_kp_getResultDistComps;
static char __pyx_k_getResultIndices[] = "getResultIndices";
static PyObject *__pyx_kp_getResultIndices;
static char __pyx_k_getResultNumFound[] = "getResultNumFound";
static PyObject *__pyx_kp_getResultNumFound;
static char __pyx_k_getResultSampleSize[] = "getResultSampleSize";
static PyObject *__pyx_kp_getResultSampleSize;
static char __pyx_k_getRNGSeed[] = "getRNGSeed";
static PyObject *__pyx_kp_getRNGSeed;
static char __pyx_k_resetQuery[] = "resetQuery";
static PyObject *__pyx_kp_resetQuery;
static char __pyx_k_save[] = "save";
static PyObject *__pyx_kp_save;
static char __pyx_k_get_persistent_data[] = "get_persistent_data";
static PyObject *__pyx_kp_get_persistent_data;
static char __pyx_k_arr[] = "arr";
static PyObject *__pyx_kp_arr;
static char __pyx_k_value[] = "value";
static PyObject *__pyx_kp_value;
static char __pyx_k_obj[] = "obj";
static PyObject *__pyx_kp_obj;
static char __pyx_k_dist[] = "dist";
static PyObject *__pyx_kp_dist;
static char __pyx_k_seed[] = "seed";
static PyObject *__pyx_kp_seed;
static char __pyx_k_filename[] = "filename";
static PyObject *__pyx_kp_filename;
static char __pyx_k_numParents[] = "numParents";
static PyObject *__pyx_kp_numParents;
static char __pyx_k_query[] = "query";
static PyObject *__pyx_kp_query;
static char __pyx_k_radius[] = "radius";
static PyObject *__pyx_kp_radius;
static char __pyx_k_sampleRate[] = "sampleRate";
static PyObject *__pyx_kp_sampleRate;
static char __pyx_k_scaleFactor[] = "scaleFactor";
static PyObject *__pyx_kp_scaleFactor;
static char __pyx_k_limit[] = "limit";
static PyObject *__pyx_kp_limit;
static char __pyx_k_howMany[] = "howMany";
static PyObject *__pyx_kp_howMany;
static char __pyx_k_maxresults[] = "maxresults";
static PyObject *__pyx_kp_maxresults;
static char __pyx_k_distance[] = "distance";
static PyObject *__pyx_kp_distance;
static char __pyx_k_numpy[] = "numpy";
static PyObject *__pyx_kp_numpy;
static char __pyx_k_dtype[] = "dtype";
static PyObject *__pyx_kp_dtype;
static char __pyx_k_31[] = "float32";
static PyObject *__pyx_kp_31;
static char __pyx_k_ndim[] = "ndim";
static PyObject *__pyx_kp_ndim;
static char __pyx_k_shape[] = "shape";
static PyObject *__pyx_kp_shape;
static char __pyx_k_range[] = "range";
static PyObject *__pyx_kp_range;
static char __pyx_k_append[] = "append";
static PyObject *__pyx_kp_append;
static char __pyx_k_32[] = "uint32";
static PyObject *__pyx_kp_32;
static char __pyx_k_IOError[] = "IOError";
static PyObject *__pyx_kp_IOError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_kp_33;
static char __pyx_k_33[] = "unable to save sash";
static PyObject *__pyx_kp_34;
static char __pyx_k_34[] = "unable to save sash";
static PyObject *__pyx_int_15;
static char __pyx_k___getbuffer__[] = "__getbuffer__";
static PyObject *__pyx_kp___getbuffer__;
static char __pyx_k___releasebuffer__[] = "__releasebuffer__";
static PyObject *__pyx_kp___releasebuffer__;
static char __pyx_k_info[] = "info";
static PyObject *__pyx_kp_info;
static char __pyx_k_flags[] = "flags";
static PyObject *__pyx_kp_flags;
static char __pyx_k_ValueError[] = "ValueError";
static PyObject *__pyx_kp_ValueError;
static char __pyx_k_itervalues[] = "itervalues";
static PyObject *__pyx_kp_itervalues;
static char __pyx_k_RuntimeError[] = "RuntimeError";
static PyObject *__pyx_kp_RuntimeError;
static PyObject *__pyx_kp_1;
static PyObject *__pyx_kp_2;
static PyObject *__pyx_kp_5;
static PyObject *__pyx_kp_23;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static char __pyx_k_1[] = "ndarray is not C contiguous";
static char __pyx_k_2[] = "ndarray is not Fortran contiguous";
static char __pyx_k_3[] = ">";
static char __pyx_k_4[] = "<";
static char __pyx_k_5[] = "Non-native byte order not supported";
static char __pyx_k_6[] = "b";
static char __pyx_k_7[] = "B";
static char __pyx_k_8[] = "h";
static char __pyx_k_9[] = "H";
static char __pyx_k_10[] = "i";
static char __pyx_k_11[] = "I";
static char __pyx_k_12[] = "l";
static char __pyx_k_13[] = "L";
static char __pyx_k_14[] = "q";
static char __pyx_k_15[] = "Q";
static char __pyx_k_16[] = "f";
static char __pyx_k_17[] = "d";
static char __pyx_k_18[] = "g";
static char __pyx_k_19[] = "Zf";
static char __pyx_k_20[] = "Zd";
static char __pyx_k_21[] = "Zg";
static char __pyx_k_22[] = "O";
static char __pyx_k_23[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_24[] = "^";
static PyObject *__pyx_kp_25;
static PyObject *__pyx_kp_28;
static PyObject *__pyx_kp_29;
static PyObject *__pyx_kp_30;
static char __pyx_k_25[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_26[] = ">";
static char __pyx_k_27[] = "<";
static char __pyx_k_28[] = "Non-native byte order not supported";
static char __pyx_k_29[] = "Format string allocated too short.";
static char __pyx_k_30[] = "unknown dtype code in numpy.pxd (%d)";

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":129
 * cdef class SashInputVec(object):
 *   cdef DistData * data
 *   def __init__(self,arr):             # <<<<<<<<<<<<<<
 *     cdef float * arrptr
 *     cdef unsigned long lrow
 */

static int __pyx_pf_6pysash_12SashInputVec___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_6pysash_12SashInputVec___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arr = 0;
  float *__pyx_v_arrptr;
  unsigned long __pyx_v_lrow;
  int __pyx_r;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  unsigned long __pyx_t_5;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_arr,0};
  __Pyx_SetupRefcountContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_arr);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_arr = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_arr = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.SashInputVec.__init__");
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":132
 *     cdef float * arrptr
 *     cdef unsigned long lrow
 *     assert(arr.dtype==numpy.float32)             # <<<<<<<<<<<<<<
 *     assert(arr.ndim==1)
 *     lrow=arr.shape[0]
 */
  #ifndef PYREX_WITHOUT_ASSERTIONS
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_arr, __pyx_kp_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_numpy); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_1, __pyx_kp_31); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":133
 *     cdef unsigned long lrow
 *     assert(arr.dtype==numpy.float32)
 *     assert(arr.ndim==1)             # <<<<<<<<<<<<<<
 *     lrow=arr.shape[0]
 *     arrptr=<float *>PyArray_DATA(arr)
 */
  #ifndef PYREX_WITHOUT_ASSERTIONS
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_arr, __pyx_kp_ndim); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_1, Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":134
 *     assert(arr.dtype==numpy.float32)
 *     assert(arr.ndim==1)
 *     lrow=arr.shape[0]             # <<<<<<<<<<<<<<
 *     arrptr=<float *>PyArray_DATA(arr)
 *     self.data=<DistData *>new_DenseVecData(arrptr,lrow)
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_arr, __pyx_kp_shape); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_1 = __Pyx_GetItemInt(__pyx_t_2, 0, sizeof(long), PyInt_FromLong); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyInt_AsUnsignedLong(__pyx_1); if (unlikely((__pyx_t_5 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
  __pyx_v_lrow = __pyx_t_5;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":135
 *     assert(arr.ndim==1)
 *     lrow=arr.shape[0]
 *     arrptr=<float *>PyArray_DATA(arr)             # <<<<<<<<<<<<<<
 *     self.data=<DistData *>new_DenseVecData(arrptr,lrow)
 *   def __del__(self,arr):
 */
  if (!(__Pyx_TypeTest(__pyx_v_arr, __pyx_ptype_5numpy_ndarray))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_arrptr = ((float *)PyArray_DATA(((PyArrayObject *)__pyx_v_arr)));

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":136
 *     lrow=arr.shape[0]
 *     arrptr=<float *>PyArray_DATA(arr)
 *     self.data=<DistData *>new_DenseVecData(arrptr,lrow)             # <<<<<<<<<<<<<<
 *   def __del__(self,arr):
 *     del_DenseVecData(<c_DenseVecData *>self.data)
 */
  ((struct __pyx_obj_6pysash_SashInputVec *)__pyx_v_self)->data = ((DistData *)new DenseVecData(__pyx_v_arrptr, __pyx_v_lrow));

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.SashInputVec.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":137
 *     arrptr=<float *>PyArray_DATA(arr)
 *     self.data=<DistData *>new_DenseVecData(arrptr,lrow)
 *   def __del__(self,arr):             # <<<<<<<<<<<<<<
 *     del_DenseVecData(<c_DenseVecData *>self.data)
 * 
 */

static PyObject *__pyx_pf_6pysash_12SashInputVec___del__(PyObject *__pyx_v_self, PyObject *__pyx_v_arr); /*proto*/
static PyObject *__pyx_pf_6pysash_12SashInputVec___del__(PyObject *__pyx_v_self, PyObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("__del__");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":138
 *     self.data=<DistData *>new_DenseVecData(arrptr,lrow)
 *   def __del__(self,arr):
 *     del_DenseVecData(<c_DenseVecData *>self.data)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete(((DenseVecData *)((struct __pyx_obj_6pysash_SashInputVec *)__pyx_v_self)->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":144
 *   cdef DistData ** data
 *   cdef int numItems
 *   def __init__(self,arr):             # <<<<<<<<<<<<<<
 *     cdef float * arrptr
 *     cdef unsigned long lrow
 */

static int __pyx_pf_6pysash_14SashInputArray___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_6pysash_14SashInputArray___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arr = 0;
  float *__pyx_v_arrptr;
  unsigned long __pyx_v_lrow;
  PyObject *__pyx_v_i;
  int __pyx_r;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  unsigned long __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_arr,0};
  __Pyx_SetupRefcountContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_arr);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_arr = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_arr = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.SashInputArray.__init__");
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_i = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":147
 *     cdef float * arrptr
 *     cdef unsigned long lrow
 *     assert(arr.dtype==numpy.float32)             # <<<<<<<<<<<<<<
 *     assert(arr.ndim==2)
 *     self.numItems=arr.shape[0]
 */
  #ifndef PYREX_WITHOUT_ASSERTIONS
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_arr, __pyx_kp_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_numpy); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_1, __pyx_kp_31); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_4)) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":148
 *     cdef unsigned long lrow
 *     assert(arr.dtype==numpy.float32)
 *     assert(arr.ndim==2)             # <<<<<<<<<<<<<<
 *     self.numItems=arr.shape[0]
 *     self.data=<DistData**>calloc(self.numItems,sizeof(c_DenseVecData *))
 */
  #ifndef PYREX_WITHOUT_ASSERTIONS
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_arr, __pyx_kp_ndim); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_int_2, Py_EQ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) {
    PyErr_SetNone(PyExc_AssertionError);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #endif

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":149
 *     assert(arr.dtype==numpy.float32)
 *     assert(arr.ndim==2)
 *     self.numItems=arr.shape[0]             # <<<<<<<<<<<<<<
 *     self.data=<DistData**>calloc(self.numItems,sizeof(c_DenseVecData *))
 *     lrow=arr.shape[1]
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_arr, __pyx_kp_shape); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_1 = __Pyx_GetItemInt(__pyx_t_2, 0, sizeof(long), PyInt_FromLong); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
  ((struct __pyx_obj_6pysash_SashInputArray *)__pyx_v_self)->numItems = __pyx_t_5;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":150
 *     assert(arr.ndim==2)
 *     self.numItems=arr.shape[0]
 *     self.data=<DistData**>calloc(self.numItems,sizeof(c_DenseVecData *))             # <<<<<<<<<<<<<<
 *     lrow=arr.shape[1]
 *     arrptr=<float *>PyArray_DATA(arr)
 */
  ((struct __pyx_obj_6pysash_SashInputArray *)__pyx_v_self)->data = ((DistData **)calloc(((struct __pyx_obj_6pysash_SashInputArray *)__pyx_v_self)->numItems, (sizeof(DenseVecData *))));

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":151
 *     self.numItems=arr.shape[0]
 *     self.data=<DistData**>calloc(self.numItems,sizeof(c_DenseVecData *))
 *     lrow=arr.shape[1]             # <<<<<<<<<<<<<<
 *     arrptr=<float *>PyArray_DATA(arr)
 *     for i in range(self.numItems):
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_arr, __pyx_kp_shape); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_1 = __Pyx_GetItemInt(__pyx_t_2, 1, sizeof(long), PyInt_FromLong); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_AsUnsignedLong(__pyx_1); if (unlikely((__pyx_t_6 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;
  __pyx_v_lrow = __pyx_t_6;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":152
 *     self.data=<DistData**>calloc(self.numItems,sizeof(c_DenseVecData *))
 *     lrow=arr.shape[1]
 *     arrptr=<float *>PyArray_DATA(arr)             # <<<<<<<<<<<<<<
 *     for i in range(self.numItems):
 *       self.data[i]=<DistData *>new_DenseVecData(arrptr,lrow)
 */
  if (!(__Pyx_TypeTest(__pyx_v_arr, __pyx_ptype_5numpy_ndarray))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_arrptr = ((float *)PyArray_DATA(((PyArrayObject *)__pyx_v_arr)));

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":153
 *     lrow=arr.shape[1]
 *     arrptr=<float *>PyArray_DATA(arr)
 *     for i in range(self.numItems):             # <<<<<<<<<<<<<<
 *       self.data[i]=<DistData *>new_DenseVecData(arrptr,lrow)
 *       arrptr=arrptr+lrow
 */
  __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_SashInputArray *)__pyx_v_self)->numItems); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_7 = 0; __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3);
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_3))) {
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_3))) {
      if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++;
    } else {
      __pyx_t_2 = PyIter_Next(__pyx_t_3);
      if (!__pyx_t_2) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_DECREF(__pyx_v_i);
    __pyx_v_i = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":154
 *     arrptr=<float *>PyArray_DATA(arr)
 *     for i in range(self.numItems):
 *       self.data[i]=<DistData *>new_DenseVecData(arrptr,lrow)             # <<<<<<<<<<<<<<
 *       arrptr=arrptr+lrow
 *   def __del__(self,arr):
 */
    __pyx_t_8 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_8 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (((struct __pyx_obj_6pysash_SashInputArray *)__pyx_v_self)->data[__pyx_t_8]) = ((DistData *)new DenseVecData(__pyx_v_arrptr, __pyx_v_lrow));

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":155
 *     for i in range(self.numItems):
 *       self.data[i]=<DistData *>new_DenseVecData(arrptr,lrow)
 *       arrptr=arrptr+lrow             # <<<<<<<<<<<<<<
 *   def __del__(self,arr):
 *     for i in range(self.numItems):
 */
    __pyx_v_arrptr = (__pyx_v_arrptr + __pyx_v_lrow);
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.SashInputArray.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_i);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":156
 *       self.data[i]=<DistData *>new_DenseVecData(arrptr,lrow)
 *       arrptr=arrptr+lrow
 *   def __del__(self,arr):             # <<<<<<<<<<<<<<
 *     for i in range(self.numItems):
 *       del_DenseVecData(<c_DenseVecData *>self.data[i])
 */

static PyObject *__pyx_pf_6pysash_14SashInputArray___del__(PyObject *__pyx_v_self, PyObject *__pyx_v_arr); /*proto*/
static PyObject *__pyx_pf_6pysash_14SashInputArray___del__(PyObject *__pyx_v_self, PyObject *__pyx_v_arr) {
  PyObject *__pyx_v_i;
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  __Pyx_SetupRefcountContext("__del__");
  __pyx_v_i = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":157
 *       arrptr=arrptr+lrow
 *   def __del__(self,arr):
 *     for i in range(self.numItems):             # <<<<<<<<<<<<<<
 *       del_DenseVecData(<c_DenseVecData *>self.data[i])
 *     free(self.data)
 */
  __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_SashInputArray *)__pyx_v_self)->numItems); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = 0; __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3);
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_3))) {
      if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_3))) {
      if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++;
    } else {
      __pyx_t_2 = PyIter_Next(__pyx_t_3);
      if (!__pyx_t_2) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_DECREF(__pyx_v_i);
    __pyx_v_i = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":158
 *   def __del__(self,arr):
 *     for i in range(self.numItems):
 *       del_DenseVecData(<c_DenseVecData *>self.data[i])             # <<<<<<<<<<<<<<
 *     free(self.data)
 * 
 */
    __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    delete(((DenseVecData *)(((struct __pyx_obj_6pysash_SashInputArray *)__pyx_v_self)->data[__pyx_t_4])));
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":159
 *     for i in range(self.numItems):
 *       del_DenseVecData(<c_DenseVecData *>self.data[i])
 *     free(self.data)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  free(((struct __pyx_obj_6pysash_SashInputArray *)__pyx_v_self)->data);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.SashInputArray.__del__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":188
 * cdef class WContainer:#(object):
 *   cdef object value
 *   def __init__(self,value):             # <<<<<<<<<<<<<<
 *     self.value=value
 *   def __repr__(self):
 */

static int __pyx_pf_6pysash_10WContainer___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_6pysash_10WContainer___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  int __pyx_r;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_value,0};
  __Pyx_SetupRefcountContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_value);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_value = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_value = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.WContainer.__init__");
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":189
 *   cdef object value
 *   def __init__(self,value):
 *     self.value=value             # <<<<<<<<<<<<<<
 *   def __repr__(self):
 *     return str(self.value)
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(((struct __pyx_obj_6pysash_WContainer *)__pyx_v_self)->value);
  __Pyx_DECREF(((struct __pyx_obj_6pysash_WContainer *)__pyx_v_self)->value);
  ((struct __pyx_obj_6pysash_WContainer *)__pyx_v_self)->value = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":190
 *   def __init__(self,value):
 *     self.value=value
 *   def __repr__(self):             # <<<<<<<<<<<<<<
 *     return str(self.value)
 *   def __str__(self):
 */

static PyObject *__pyx_pf_6pysash_10WContainer___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6pysash_10WContainer___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("__repr__");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":191
 *     self.value=value
 *   def __repr__(self):
 *     return str(self.value)             # <<<<<<<<<<<<<<
 *   def __str__(self):
 *     return str(self.value)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((struct __pyx_obj_6pysash_WContainer *)__pyx_v_self)->value);
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((struct __pyx_obj_6pysash_WContainer *)__pyx_v_self)->value);
  __Pyx_GIVEREF(((struct __pyx_obj_6pysash_WContainer *)__pyx_v_self)->value);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)&PyString_Type)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysash.WContainer.__repr__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":192
 *   def __repr__(self):
 *     return str(self.value)
 *   def __str__(self):             # <<<<<<<<<<<<<<
 *     return str(self.value)
 * 
 */

static PyObject *__pyx_pf_6pysash_10WContainer___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_6pysash_10WContainer___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_SetupRefcountContext("__str__");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":193
 *     return str(self.value)
 *   def __str__(self):
 *     return str(self.value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((struct __pyx_obj_6pysash_WContainer *)__pyx_v_self)->value);
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((struct __pyx_obj_6pysash_WContainer *)__pyx_v_self)->value);
  __Pyx_GIVEREF(((struct __pyx_obj_6pysash_WContainer *)__pyx_v_self)->value);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)&PyString_Type)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysash.WContainer.__str__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":196
 * 
 * 
 * cdef float generic_distance_callback(void * a,void * b, void * dist):             # <<<<<<<<<<<<<<
 *       return (<object>dist)((<WContainer>a).value,(<WContainer> b).value)
 * 
 */

static  float __pyx_f_6pysash_generic_distance_callback(void *__pyx_v_a, void *__pyx_v_b, void *__pyx_v_dist) {
  float __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  float __pyx_t_3;
  __Pyx_SetupRefcountContext("generic_distance_callback");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":197
 * 
 * cdef float generic_distance_callback(void * a,void * b, void * dist):
 *       return (<object>dist)((<WContainer>a).value,(<WContainer> b).value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((struct __pyx_obj_6pysash_WContainer *)__pyx_v_a)->value);
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((struct __pyx_obj_6pysash_WContainer *)__pyx_v_a)->value);
  __Pyx_GIVEREF(((struct __pyx_obj_6pysash_WContainer *)__pyx_v_a)->value);
  __Pyx_INCREF(((struct __pyx_obj_6pysash_WContainer *)__pyx_v_b)->value);
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((struct __pyx_obj_6pysash_WContainer *)__pyx_v_b)->value);
  __Pyx_GIVEREF(((struct __pyx_obj_6pysash_WContainer *)__pyx_v_b)->value);
  __pyx_t_2 = PyObject_Call(((PyObject *)__pyx_v_dist), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("pysash.generic_distance_callback");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":203
 *   cdef DistData * data
 *   cdef object container_obj
 *   def __init__(self,obj,dist):             # <<<<<<<<<<<<<<
 *     self.container_obj=WContainer(obj)
 *     self.data=<DistData *>new_PythonVecData(<void *> self.container_obj,generic_distance_callback,<void*> dist)
 */

static int __pyx_pf_6pysash_18SashInputVecPython___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_6pysash_18SashInputVecPython___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  PyObject *__pyx_v_dist = 0;
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_obj,&__pyx_kp_dist,0};
  __Pyx_SetupRefcountContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_obj);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_kp_dist);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_obj = values[0];
    __pyx_v_dist = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_obj = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_dist = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.SashInputVecPython.__init__");
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":204
 *   cdef object container_obj
 *   def __init__(self,obj,dist):
 *     self.container_obj=WContainer(obj)             # <<<<<<<<<<<<<<
 *     self.data=<DistData *>new_PythonVecData(<void *> self.container_obj,generic_distance_callback,<void*> dist)
 *   def __del__(self,arr):
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_obj);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6pysash_WContainer)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(((struct __pyx_obj_6pysash_SashInputVecPython *)__pyx_v_self)->container_obj);
  __Pyx_DECREF(((struct __pyx_obj_6pysash_SashInputVecPython *)__pyx_v_self)->container_obj);
  ((struct __pyx_obj_6pysash_SashInputVecPython *)__pyx_v_self)->container_obj = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":205
 *   def __init__(self,obj,dist):
 *     self.container_obj=WContainer(obj)
 *     self.data=<DistData *>new_PythonVecData(<void *> self.container_obj,generic_distance_callback,<void*> dist)             # <<<<<<<<<<<<<<
 *   def __del__(self,arr):
 *     del_PythonVecData(<c_PythonVecData *>self.data)
 */
  ((struct __pyx_obj_6pysash_SashInputVecPython *)__pyx_v_self)->data = ((DistData *)new PythonVecData(((void *)((struct __pyx_obj_6pysash_SashInputVecPython *)__pyx_v_self)->container_obj), __pyx_f_6pysash_generic_distance_callback, ((void *)__pyx_v_dist)));

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysash.SashInputVecPython.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":206
 *     self.container_obj=WContainer(obj)
 *     self.data=<DistData *>new_PythonVecData(<void *> self.container_obj,generic_distance_callback,<void*> dist)
 *   def __del__(self,arr):             # <<<<<<<<<<<<<<
 *     del_PythonVecData(<c_PythonVecData *>self.data)
 * 
 */

static PyObject *__pyx_pf_6pysash_18SashInputVecPython___del__(PyObject *__pyx_v_self, PyObject *__pyx_v_arr); /*proto*/
static PyObject *__pyx_pf_6pysash_18SashInputVecPython___del__(PyObject *__pyx_v_self, PyObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("__del__");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":207
 *     self.data=<DistData *>new_PythonVecData(<void *> self.container_obj,generic_distance_callback,<void*> dist)
 *   def __del__(self,arr):
 *     del_PythonVecData(<c_PythonVecData *>self.data)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  delete(((PythonVecData *)((struct __pyx_obj_6pysash_SashInputVecPython *)__pyx_v_self)->data));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":214
 *   cdef int numItems
 *   cdef object container_objlist
 *   def __init__(self,arr,dist):             # <<<<<<<<<<<<<<
 *     self.numItems=len(arr)
 *     self.container_objlist=[]
 */

static int __pyx_pf_6pysash_20SashInputArrayPython___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_6pysash_20SashInputArrayPython___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arr = 0;
  PyObject *__pyx_v_dist = 0;
  PyObject *__pyx_v_i;
  PyObject *__pyx_v_wc;
  int __pyx_r;
  PyObject *__pyx_1 = 0;
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_arr,&__pyx_kp_dist,0};
  __Pyx_SetupRefcountContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_arr);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_kp_dist);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_arr = values[0];
    __pyx_v_dist = values[1];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_arr = PyTuple_GET_ITEM(__pyx_args, 0);
    __pyx_v_dist = PyTuple_GET_ITEM(__pyx_args, 1);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.SashInputArrayPython.__init__");
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_i = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_wc = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":215
 *   cdef object container_objlist
 *   def __init__(self,arr,dist):
 *     self.numItems=len(arr)             # <<<<<<<<<<<<<<
 *     self.container_objlist=[]
 *     self.data=<DistData**>calloc(self.numItems,sizeof(c_PythonVecData *))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_arr); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_6pysash_SashInputArrayPython *)__pyx_v_self)->numItems = __pyx_t_1;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":216
 *   def __init__(self,arr,dist):
 *     self.numItems=len(arr)
 *     self.container_objlist=[]             # <<<<<<<<<<<<<<
 *     self.data=<DistData**>calloc(self.numItems,sizeof(c_PythonVecData *))
 *     for i in range(self.numItems):
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __Pyx_GOTREF(((struct __pyx_obj_6pysash_SashInputArrayPython *)__pyx_v_self)->container_objlist);
  __Pyx_DECREF(((struct __pyx_obj_6pysash_SashInputArrayPython *)__pyx_v_self)->container_objlist);
  ((struct __pyx_obj_6pysash_SashInputArrayPython *)__pyx_v_self)->container_objlist = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":217
 *     self.numItems=len(arr)
 *     self.container_objlist=[]
 *     self.data=<DistData**>calloc(self.numItems,sizeof(c_PythonVecData *))             # <<<<<<<<<<<<<<
 *     for i in range(self.numItems):
 *       wc=WContainer(arr[i])
 */
  ((struct __pyx_obj_6pysash_SashInputArrayPython *)__pyx_v_self)->data = ((DistData **)calloc(((struct __pyx_obj_6pysash_SashInputArrayPython *)__pyx_v_self)->numItems, (sizeof(PythonVecData *))));

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":218
 *     self.container_objlist=[]
 *     self.data=<DistData**>calloc(self.numItems,sizeof(c_PythonVecData *))
 *     for i in range(self.numItems):             # <<<<<<<<<<<<<<
 *       wc=WContainer(arr[i])
 *       self.container_objlist.append(wc)
 */
  __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_SashInputArrayPython *)__pyx_v_self)->numItems); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = 0; __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3);
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_3))) {
      if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_3))) {
      if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++;
    } else {
      __pyx_t_2 = PyIter_Next(__pyx_t_3);
      if (!__pyx_t_2) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_DECREF(__pyx_v_i);
    __pyx_v_i = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":219
 *     self.data=<DistData**>calloc(self.numItems,sizeof(c_PythonVecData *))
 *     for i in range(self.numItems):
 *       wc=WContainer(arr[i])             # <<<<<<<<<<<<<<
 *       self.container_objlist.append(wc)
 *       self.data[i]=<DistData *>new_PythonVecData(<void *>wc,generic_distance_callback,<void*> dist)
 */
    __pyx_1 = PyObject_GetItem(__pyx_v_arr, __pyx_v_i); if (!__pyx_1) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_1);
    __Pyx_GIVEREF(__pyx_1);
    __pyx_1 = 0;
    __pyx_t_4 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6pysash_WContainer)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_v_wc);
    __pyx_v_wc = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":220
 *     for i in range(self.numItems):
 *       wc=WContainer(arr[i])
 *       self.container_objlist.append(wc)             # <<<<<<<<<<<<<<
 *       self.data[i]=<DistData *>new_PythonVecData(<void *>wc,generic_distance_callback,<void*> dist)
 *   def __del__(self,arr):
 */
    __pyx_t_4 = __Pyx_PyObject_Append(((struct __pyx_obj_6pysash_SashInputArrayPython *)__pyx_v_self)->container_objlist, __pyx_v_wc); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":221
 *       wc=WContainer(arr[i])
 *       self.container_objlist.append(wc)
 *       self.data[i]=<DistData *>new_PythonVecData(<void *>wc,generic_distance_callback,<void*> dist)             # <<<<<<<<<<<<<<
 *   def __del__(self,arr):
 *     for i in range(self.numItems):
 */
    __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    (((struct __pyx_obj_6pysash_SashInputArrayPython *)__pyx_v_self)->data[__pyx_t_5]) = ((DistData *)new PythonVecData(((void *)__pyx_v_wc), __pyx_f_6pysash_generic_distance_callback, ((void *)__pyx_v_dist)));
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pysash.SashInputArrayPython.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_i);
  __Pyx_DECREF(__pyx_v_wc);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":222
 *       self.container_objlist.append(wc)
 *       self.data[i]=<DistData *>new_PythonVecData(<void *>wc,generic_distance_callback,<void*> dist)
 *   def __del__(self,arr):             # <<<<<<<<<<<<<<
 *     for i in range(self.numItems):
 *       del_PythonVecData(<c_PythonVecData *>self.data[i])
 */

static PyObject *__pyx_pf_6pysash_20SashInputArrayPython___del__(PyObject *__pyx_v_self, PyObject *__pyx_v_arr); /*proto*/
static PyObject *__pyx_pf_6pysash_20SashInputArrayPython___del__(PyObject *__pyx_v_self, PyObject *__pyx_v_arr) {
  PyObject *__pyx_v_i;
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  __Pyx_SetupRefcountContext("__del__");
  __pyx_v_i = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":223
 *       self.data[i]=<DistData *>new_PythonVecData(<void *>wc,generic_distance_callback,<void*> dist)
 *   def __del__(self,arr):
 *     for i in range(self.numItems):             # <<<<<<<<<<<<<<
 *       del_PythonVecData(<c_PythonVecData *>self.data[i])
 *     free(self.data)
 */
  __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_SashInputArrayPython *)__pyx_v_self)->numItems); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_builtin_range, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = 0; __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3);
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_3))) {
      if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_3))) {
      if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++;
    } else {
      __pyx_t_2 = PyIter_Next(__pyx_t_3);
      if (!__pyx_t_2) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_DECREF(__pyx_v_i);
    __pyx_v_i = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":224
 *   def __del__(self,arr):
 *     for i in range(self.numItems):
 *       del_PythonVecData(<c_PythonVecData *>self.data[i])             # <<<<<<<<<<<<<<
 *     free(self.data)
 * 
 */
    __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    delete(((PythonVecData *)(((struct __pyx_obj_6pysash_SashInputArrayPython *)__pyx_v_self)->data[__pyx_t_4])));
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":225
 *     for i in range(self.numItems):
 *       del_PythonVecData(<c_PythonVecData *>self.data[i])
 *     free(self.data)             # <<<<<<<<<<<<<<
 * 
 * cdef class Sash(object):
 */
  free(((struct __pyx_obj_6pysash_SashInputArrayPython *)__pyx_v_self)->data);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.SashInputArrayPython.__del__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":229
 * cdef class Sash(object):
 *   cdef c_Sash * sashinstance
 *   def __init__(int self,seed=0):             # <<<<<<<<<<<<<<
 *     """
 *      Constructor with optional seed for random number generator initialization.
 */

static int __pyx_pf_6pysash_4Sash___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pysash_4Sash___init__[] = "\n     Constructor with optional seed for random number generator initialization.\n    ";
static int __pyx_pf_6pysash_4Sash___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_seed = 0;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned long __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_seed,0};
  __Pyx_SetupRefcountContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    values[0] = __pyx_int_0;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_seed);
        if (unlikely(value)) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_seed = values[0];
  } else {
    __pyx_v_seed = __pyx_int_0;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_seed = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.Sash.__init__");
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":233
 *      Constructor with optional seed for random number generator initialization.
 *     """
 *     if (not seed):             # <<<<<<<<<<<<<<
 *       self.sashinstance=new_Sash()
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_seed); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":234
 *     """
 *     if (not seed):
 *       self.sashinstance=new_Sash()             # <<<<<<<<<<<<<<
 *     else:
 *       self.sashinstance=new_Sash_with_seed(seed)
 */
    ((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance = new Sash();
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":236
 *       self.sashinstance=new_Sash()
 *     else:
 *       self.sashinstance=new_Sash_with_seed(seed)             # <<<<<<<<<<<<<<
 *   def __del__(self):
 *     del_Sash(self.sashinstance)
 */
    __pyx_t_3 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_seed); if (unlikely((__pyx_t_3 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance = new Sash(__pyx_t_3);
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysash.Sash.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":237
 *     else:
 *       self.sashinstance=new_Sash_with_seed(seed)
 *   def __del__(self):             # <<<<<<<<<<<<<<
 *     del_Sash(self.sashinstance)
 *   def _build(self,SashInputArray arr,filename=None,numParents=None):
 */

static PyObject *__pyx_pf_6pysash_4Sash___del__(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6pysash_4Sash___del__(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("__del__");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":238
 *       self.sashinstance=new_Sash_with_seed(seed)
 *   def __del__(self):
 *     del_Sash(self.sashinstance)             # <<<<<<<<<<<<<<
 *   def _build(self,SashInputArray arr,filename=None,numParents=None):
 *     if (filename):
 */
  delete(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":239
 *   def __del__(self):
 *     del_Sash(self.sashinstance)
 *   def _build(self,SashInputArray arr,filename=None,numParents=None):             # <<<<<<<<<<<<<<
 *     if (filename):
 *       self.sashinstance.build_with_filename(filename,arr.data, arr.numItems)
 */

static PyObject *__pyx_pf_6pysash_4Sash__build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6pysash_4Sash__build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pysash_SashInputArray *__pyx_v_arr = 0;
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_numParents = 0;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  char *__pyx_t_2;
  int __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_arr,&__pyx_kp_filename,&__pyx_kp_numParents,0};
  __Pyx_SetupRefcountContext("_build");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    values[1] = Py_None;
    values[2] = Py_None;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_arr);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_filename);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_numParents);
        if (unlikely(value)) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_build") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_arr = ((struct __pyx_obj_6pysash_SashInputArray *)values[0]);
    __pyx_v_filename = values[1];
    __pyx_v_numParents = values[2];
  } else {
    __pyx_v_filename = Py_None;
    __pyx_v_numParents = Py_None;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_numParents = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: __pyx_v_filename = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: __pyx_v_arr = ((struct __pyx_obj_6pysash_SashInputArray *)PyTuple_GET_ITEM(__pyx_args, 0));
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_build", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.Sash._build");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arr), __pyx_ptype_6pysash_SashInputArray, 1, "arr", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":240
 *     del_Sash(self.sashinstance)
 *   def _build(self,SashInputArray arr,filename=None,numParents=None):
 *     if (filename):             # <<<<<<<<<<<<<<
 *       self.sashinstance.build_with_filename(filename,arr.data, arr.numItems)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_filename); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":241
 *   def _build(self,SashInputArray arr,filename=None,numParents=None):
 *     if (filename):
 *       self.sashinstance.build_with_filename(filename,arr.data, arr.numItems)             # <<<<<<<<<<<<<<
 *     else:
 *        if (numParents):
 */
    __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->build(__pyx_t_2, __pyx_v_arr->data, __pyx_v_arr->numItems);
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":243
 *       self.sashinstance.build_with_filename(filename,arr.data, arr.numItems)
 *     else:
 *        if (numParents):             # <<<<<<<<<<<<<<
 *          self.sashinstance.build_with_numParents(arr.data, arr.numItems,numParents)
 *        else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_numParents); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_1) {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":244
 *     else:
 *        if (numParents):
 *          self.sashinstance.build_with_numParents(arr.data, arr.numItems,numParents)             # <<<<<<<<<<<<<<
 *        else:
 *          self.sashinstance.build(arr.data, arr.numItems)
 */
      __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_numParents); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      ((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->build(__pyx_v_arr->data, __pyx_v_arr->numItems, __pyx_t_3);
      goto __pyx_L7;
    }
    /*else*/ {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":246
 *          self.sashinstance.build_with_numParents(arr.data, arr.numItems,numParents)
 *        else:
 *          self.sashinstance.build(arr.data, arr.numItems)             # <<<<<<<<<<<<<<
 * 
 *   def build(self,arr,*args,**xargs):
 */
      ((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->build(__pyx_v_arr->data, __pyx_v_arr->numItems);
    }
    __pyx_L7:;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysash.Sash._build");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":248
 *          self.sashinstance.build(arr.data, arr.numItems)
 * 
 *   def build(self,arr,*args,**xargs):             # <<<<<<<<<<<<<<
 *     """
 *      Constructs or load a new sash from a file.
 */

static PyObject *__pyx_pf_6pysash_4Sash_build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pysash_4Sash_build[] = "\n     Constructs or load a new sash from a file.\n     When no numParents is specified  the default is assumed to be 4.\n    ";
static PyObject *__pyx_pf_6pysash_4Sash_build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arr = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_xargs = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_arr,0};
  __Pyx_SetupRefcountContext("build");
  __pyx_v_xargs = PyDict_New(); if (unlikely(!__pyx_v_xargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_xargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args)); __Pyx_GOTREF(__pyx_v_args);

    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_xargs);
      return NULL;
    }
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      default:
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_arr);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      const Py_ssize_t used_pos_args = (PyTuple_GET_SIZE(__pyx_args) < 1) ? PyTuple_GET_SIZE(__pyx_args) : 1;
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_xargs, values, used_pos_args, "build") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_arr = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_arr = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("build", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_AddTraceback("pysash.Sash.build");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":253
 *      When no numParents is specified  the default is assumed to be 4.
 *     """
 *     return self._build(SashInputArray(arr),*args,**xargs)             # <<<<<<<<<<<<<<
 * 
 *   def _findAllInBall(self,SashInputVec query,float radius=10,int sampleRate=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__build); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_arr);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_arr);
  __Pyx_GIVEREF(__pyx_v_arr);
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6pysash_SashInputArray)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_1 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(__pyx_t_1, __pyx_t_3, __pyx_v_xargs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.Sash.build");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":255
 *     return self._build(SashInputArray(arr),*args,**xargs)
 * 
 *   def _findAllInBall(self,SashInputVec query,float radius=10,int sampleRate=-1):             # <<<<<<<<<<<<<<
 *      if (sampleRate==-1):
 *        return self.sashinstance.findAllInRange(query.data, radius)
 */

static PyObject *__pyx_pf_6pysash_4Sash__findAllInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6pysash_4Sash__findAllInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pysash_SashInputVec *__pyx_v_query = 0;
  float __pyx_v_radius;
  int __pyx_v_sampleRate;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,&__pyx_kp_radius,&__pyx_kp_sampleRate,0};
  __Pyx_SetupRefcountContext("_findAllInBall");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_radius);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_sampleRate);
        if (unlikely(value)) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_findAllInBall") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVec *)values[0]);
    if (values[1]) {
      __pyx_v_radius = __pyx_PyFloat_AsDouble(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_radius = ((float)10);
    }
    if (values[2]) {
      __pyx_v_sampleRate = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sampleRate = -1;
    }
  } else {
    __pyx_v_radius = ((float)10);
    __pyx_v_sampleRate = -1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_sampleRate = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_radius = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVec *)PyTuple_GET_ITEM(__pyx_args, 0));
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_findAllInBall", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.Sash._findAllInBall");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_query), __pyx_ptype_6pysash_SashInputVec, 1, "query", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":256
 * 
 *   def _findAllInBall(self,SashInputVec query,float radius=10,int sampleRate=-1):
 *      if (sampleRate==-1):             # <<<<<<<<<<<<<<
 *        return self.sashinstance.findAllInRange(query.data, radius)
 *      else:
 */
  __pyx_t_1 = (__pyx_v_sampleRate == -1);
  if (__pyx_t_1) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":257
 *   def _findAllInBall(self,SashInputVec query,float radius=10,int sampleRate=-1):
 *      if (sampleRate==-1):
 *        return self.sashinstance.findAllInRange(query.data, radius)             # <<<<<<<<<<<<<<
 *      else:
 *        return self.sashinstance.findAllInRange_with_sampleRate(query.data,radius,sampleRate)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->findAllInRange(__pyx_v_query->data, __pyx_v_radius)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":259
 *        return self.sashinstance.findAllInRange(query.data, radius)
 *      else:
 *        return self.sashinstance.findAllInRange_with_sampleRate(query.data,radius,sampleRate)             # <<<<<<<<<<<<<<
 * 
 *   def findAllInBall(self,query, *args, **xargs):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->findAllInRange(__pyx_v_query->data, __pyx_v_radius, __pyx_v_sampleRate)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysash.Sash._findAllInBall");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":261
 *        return self.sashinstance.findAllInRange_with_sampleRate(query.data,radius,sampleRate)
 * 
 *   def findAllInBall(self,query, *args, **xargs):             # <<<<<<<<<<<<<<
 *     return self._findAllInBall(SashInputVec(query), *args, **xargs )
 * 
 */

static PyObject *__pyx_pf_6pysash_4Sash_findAllInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6pysash_4Sash_findAllInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_query = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_xargs = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,0};
  __Pyx_SetupRefcountContext("findAllInBall");
  __pyx_v_xargs = PyDict_New(); if (unlikely(!__pyx_v_xargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_xargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args)); __Pyx_GOTREF(__pyx_v_args);

    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_xargs);
      return NULL;
    }
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      default:
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      const Py_ssize_t used_pos_args = (PyTuple_GET_SIZE(__pyx_args) < 1) ? PyTuple_GET_SIZE(__pyx_args) : 1;
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_xargs, values, used_pos_args, "findAllInBall") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_query = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findAllInBall", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_AddTraceback("pysash.Sash.findAllInBall");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":262
 * 
 *   def findAllInBall(self,query, *args, **xargs):
 *     return self._findAllInBall(SashInputVec(query), *args, **xargs )             # <<<<<<<<<<<<<<
 * 
 *   def _findMostInBall(self,SashInputVec query,float radius=10,int sampleRate=-1,int scaleFactor=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__findAllInBall); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_query);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_query);
  __Pyx_GIVEREF(__pyx_v_query);
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6pysash_SashInputVec)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_1 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(__pyx_t_1, __pyx_t_3, __pyx_v_xargs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.Sash.findAllInBall");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":264
 *     return self._findAllInBall(SashInputVec(query), *args, **xargs )
 * 
 *   def _findMostInBall(self,SashInputVec query,float radius=10,int sampleRate=-1,int scaleFactor=-1):             # <<<<<<<<<<<<<<
 *      if (scaleFactor==-1):
 *        if (sampleRate==-1):
 */

static PyObject *__pyx_pf_6pysash_4Sash__findMostInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6pysash_4Sash__findMostInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pysash_SashInputVec *__pyx_v_query = 0;
  float __pyx_v_radius;
  int __pyx_v_sampleRate;
  int __pyx_v_scaleFactor;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,&__pyx_kp_radius,&__pyx_kp_sampleRate,&__pyx_kp_scaleFactor,0};
  __Pyx_SetupRefcountContext("_findMostInBall");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_radius);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_sampleRate);
        if (unlikely(value)) { values[2] = value; kw_args--; }
      }
      case  3:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_scaleFactor);
        if (unlikely(value)) { values[3] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_findMostInBall") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVec *)values[0]);
    if (values[1]) {
      __pyx_v_radius = __pyx_PyFloat_AsDouble(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_radius = ((float)10);
    }
    if (values[2]) {
      __pyx_v_sampleRate = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sampleRate = -1;
    }
    if (values[3]) {
      __pyx_v_scaleFactor = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_scaleFactor == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_scaleFactor = -1;
    }
  } else {
    __pyx_v_radius = ((float)10);
    __pyx_v_sampleRate = -1;
    __pyx_v_scaleFactor = -1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: __pyx_v_scaleFactor = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_scaleFactor == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  3: __pyx_v_sampleRate = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_radius = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVec *)PyTuple_GET_ITEM(__pyx_args, 0));
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_findMostInBall", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.Sash._findMostInBall");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_query), __pyx_ptype_6pysash_SashInputVec, 1, "query", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":265
 * 
 *   def _findMostInBall(self,SashInputVec query,float radius=10,int sampleRate=-1,int scaleFactor=-1):
 *      if (scaleFactor==-1):             # <<<<<<<<<<<<<<
 *        if (sampleRate==-1):
 *          return self.sashinstance.findMostInRange(query.data, radius)
 */
  __pyx_t_1 = (__pyx_v_scaleFactor == -1);
  if (__pyx_t_1) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":266
 *   def _findMostInBall(self,SashInputVec query,float radius=10,int sampleRate=-1,int scaleFactor=-1):
 *      if (scaleFactor==-1):
 *        if (sampleRate==-1):             # <<<<<<<<<<<<<<
 *          return self.sashinstance.findMostInRange(query.data, radius)
 *        else:
 */
    __pyx_t_1 = (__pyx_v_sampleRate == -1);
    if (__pyx_t_1) {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":267
 *      if (scaleFactor==-1):
 *        if (sampleRate==-1):
 *          return self.sashinstance.findMostInRange(query.data, radius)             # <<<<<<<<<<<<<<
 *        else:
 *          return self.sashinstance.findMostInRange_with_sampleRate(query.data,radius,sampleRate)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->findMostInRange(__pyx_v_query->data, __pyx_v_radius)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
      goto __pyx_L7;
    }
    /*else*/ {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":269
 *          return self.sashinstance.findMostInRange(query.data, radius)
 *        else:
 *          return self.sashinstance.findMostInRange_with_sampleRate(query.data,radius,sampleRate)             # <<<<<<<<<<<<<<
 *      else:
 *        if (sampleRate==-1):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->findMostInRange(__pyx_v_query->data, __pyx_v_radius, __pyx_v_sampleRate)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":271
 *          return self.sashinstance.findMostInRange_with_sampleRate(query.data,radius,sampleRate)
 *      else:
 *        if (sampleRate==-1):             # <<<<<<<<<<<<<<
 *          return self.sashinstance.findMostInRange_with_scaleFactor(query.data,  radius, scaleFactor)
 *        else:
 */
    __pyx_t_1 = (__pyx_v_sampleRate == -1);
    if (__pyx_t_1) {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":272
 *      else:
 *        if (sampleRate==-1):
 *          return self.sashinstance.findMostInRange_with_scaleFactor(query.data,  radius, scaleFactor)             # <<<<<<<<<<<<<<
 *        else:
 *          return self.sashinstance.findMostInRange_full(query.data,radius,sampleRate, scaleFactor)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->findMostInRange(__pyx_v_query->data, __pyx_v_radius, __pyx_v_scaleFactor)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
      goto __pyx_L8;
    }
    /*else*/ {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":274
 *          return self.sashinstance.findMostInRange_with_scaleFactor(query.data,  radius, scaleFactor)
 *        else:
 *          return self.sashinstance.findMostInRange_full(query.data,radius,sampleRate, scaleFactor)             # <<<<<<<<<<<<<<
 * 
 *   def findMostInBall(self,query, *args, **xargs):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->findMostInRange(__pyx_v_query->data, __pyx_v_radius, __pyx_v_sampleRate, __pyx_v_scaleFactor)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
    }
    __pyx_L8:;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysash.Sash._findMostInBall");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":276
 *          return self.sashinstance.findMostInRange_full(query.data,radius,sampleRate, scaleFactor)
 * 
 *   def findMostInBall(self,query, *args, **xargs):             # <<<<<<<<<<<<<<
 *     """
 *     * Perform an approximate range query for the specified item.
 */

static PyObject *__pyx_pf_6pysash_4Sash_findMostInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pysash_4Sash_findMostInBall[] = "\n    * Perform an approximate range query for the specified item.\n    * The upper limit on the query-to-item distance must be supplied (radius).\n    * The number of elements actually found is returned.\n    * The search may be relative to a data sample of size N / 2^r,\n    *   where N is the number of items in the set, and r is \n    *   a non-negative integer (\"sampleRate\").\n    * A \"sampleRate\" of zero indicates a search relative to the entire set.\n    * The method may also makes use of a parameter (\"scaleFactor\")\n    *   that influences the trade-off between time and accuracy.\n    * The default value of this parameter is 1.0 - increasing the value\n    *   will increase running time (roughly proportionally) and increase\n    *   the accuracy of the result.\n    ";
static PyObject *__pyx_pf_6pysash_4Sash_findMostInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_query = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_xargs = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,0};
  __Pyx_SetupRefcountContext("findMostInBall");
  __pyx_v_xargs = PyDict_New(); if (unlikely(!__pyx_v_xargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_xargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args)); __Pyx_GOTREF(__pyx_v_args);

    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_xargs);
      return NULL;
    }
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      default:
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      const Py_ssize_t used_pos_args = (PyTuple_GET_SIZE(__pyx_args) < 1) ? PyTuple_GET_SIZE(__pyx_args) : 1;
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_xargs, values, used_pos_args, "findMostInBall") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_query = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findMostInBall", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_AddTraceback("pysash.Sash.findMostInBall");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":291
 *     *   the accuracy of the result.
 *     """
 *     return self._findMostInBall(SashInputVec(query), *args, **xargs )             # <<<<<<<<<<<<<<
 * 
 *   def _findNearest(self, SashInputVec query, int limit=10, int sampleRate=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__findMostInBall); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_query);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_query);
  __Pyx_GIVEREF(__pyx_v_query);
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6pysash_SashInputVec)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_1 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(__pyx_t_1, __pyx_t_3, __pyx_v_xargs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.Sash.findMostInBall");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":293
 *     return self._findMostInBall(SashInputVec(query), *args, **xargs )
 * 
 *   def _findNearest(self, SashInputVec query, int limit=10, int sampleRate=-1):             # <<<<<<<<<<<<<<
 *      if (sampleRate==-1):
 *        return self.sashinstance.findNearest(query.data , limit)
 */

static PyObject *__pyx_pf_6pysash_4Sash__findNearest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6pysash_4Sash__findNearest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pysash_SashInputVec *__pyx_v_query = 0;
  int __pyx_v_limit;
  int __pyx_v_sampleRate;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,&__pyx_kp_limit,&__pyx_kp_sampleRate,0};
  __Pyx_SetupRefcountContext("_findNearest");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_limit);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_sampleRate);
        if (unlikely(value)) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_findNearest") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVec *)values[0]);
    if (values[1]) {
      __pyx_v_limit = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_limit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_limit = 10;
    }
    if (values[2]) {
      __pyx_v_sampleRate = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sampleRate = -1;
    }
  } else {
    __pyx_v_limit = 10;
    __pyx_v_sampleRate = -1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_sampleRate = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_limit = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_limit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVec *)PyTuple_GET_ITEM(__pyx_args, 0));
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_findNearest", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.Sash._findNearest");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_query), __pyx_ptype_6pysash_SashInputVec, 1, "query", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":294
 * 
 *   def _findNearest(self, SashInputVec query, int limit=10, int sampleRate=-1):
 *      if (sampleRate==-1):             # <<<<<<<<<<<<<<
 *        return self.sashinstance.findNearest(query.data , limit)
 *      else:
 */
  __pyx_t_1 = (__pyx_v_sampleRate == -1);
  if (__pyx_t_1) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":295
 *   def _findNearest(self, SashInputVec query, int limit=10, int sampleRate=-1):
 *      if (sampleRate==-1):
 *        return self.sashinstance.findNearest(query.data , limit)             # <<<<<<<<<<<<<<
 *      else:
 *        return self.sashinstance.findNearest_full(query.data,limit,sampleRate)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->findNearest(__pyx_v_query->data, __pyx_v_limit)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":297
 *        return self.sashinstance.findNearest(query.data , limit)
 *      else:
 *        return self.sashinstance.findNearest_full(query.data,limit,sampleRate)             # <<<<<<<<<<<<<<
 * 
 *   def findNearest(self,query, *args, **xargs):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->findNearest(__pyx_v_query->data, __pyx_v_limit, __pyx_v_sampleRate)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysash.Sash._findNearest");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":299
 *        return self.sashinstance.findNearest_full(query.data,limit,sampleRate)
 * 
 *   def findNearest(self,query, *args, **xargs):             # <<<<<<<<<<<<<<
 *     return self._findNearest(SashInputVec(query), *args, **xargs )
 * 
 */

static PyObject *__pyx_pf_6pysash_4Sash_findNearest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6pysash_4Sash_findNearest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_query = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_xargs = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,0};
  __Pyx_SetupRefcountContext("findNearest");
  __pyx_v_xargs = PyDict_New(); if (unlikely(!__pyx_v_xargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_xargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args)); __Pyx_GOTREF(__pyx_v_args);

    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_xargs);
      return NULL;
    }
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      default:
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      const Py_ssize_t used_pos_args = (PyTuple_GET_SIZE(__pyx_args) < 1) ? PyTuple_GET_SIZE(__pyx_args) : 1;
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_xargs, values, used_pos_args, "findNearest") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_query = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findNearest", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_AddTraceback("pysash.Sash.findNearest");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":300
 * 
 *   def findNearest(self,query, *args, **xargs):
 *     return self._findNearest(SashInputVec(query), *args, **xargs )             # <<<<<<<<<<<<<<
 * 
 *   def _findNear(self,SashInputVec query,int limit=10,int sampleRate=-1,int scaleFactor=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__findNearest); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_query);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_query);
  __Pyx_GIVEREF(__pyx_v_query);
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6pysash_SashInputVec)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_1 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(__pyx_t_1, __pyx_t_3, __pyx_v_xargs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.Sash.findNearest");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":302
 *     return self._findNearest(SashInputVec(query), *args, **xargs )
 * 
 *   def _findNear(self,SashInputVec query,int limit=10,int sampleRate=-1,int scaleFactor=-1):             # <<<<<<<<<<<<<<
 *      if (scaleFactor==-1):
 *        if (sampleRate==-1):
 */

static PyObject *__pyx_pf_6pysash_4Sash__findNear(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6pysash_4Sash__findNear(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pysash_SashInputVec *__pyx_v_query = 0;
  int __pyx_v_limit;
  int __pyx_v_sampleRate;
  int __pyx_v_scaleFactor;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,&__pyx_kp_limit,&__pyx_kp_sampleRate,&__pyx_kp_scaleFactor,0};
  __Pyx_SetupRefcountContext("_findNear");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_limit);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_sampleRate);
        if (unlikely(value)) { values[2] = value; kw_args--; }
      }
      case  3:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_scaleFactor);
        if (unlikely(value)) { values[3] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_findNear") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVec *)values[0]);
    if (values[1]) {
      __pyx_v_limit = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_limit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_limit = 10;
    }
    if (values[2]) {
      __pyx_v_sampleRate = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sampleRate = -1;
    }
    if (values[3]) {
      __pyx_v_scaleFactor = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_scaleFactor == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_scaleFactor = -1;
    }
  } else {
    __pyx_v_limit = 10;
    __pyx_v_sampleRate = -1;
    __pyx_v_scaleFactor = -1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: __pyx_v_scaleFactor = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_scaleFactor == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  3: __pyx_v_sampleRate = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_limit = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_limit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVec *)PyTuple_GET_ITEM(__pyx_args, 0));
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_findNear", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.Sash._findNear");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_query), __pyx_ptype_6pysash_SashInputVec, 1, "query", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":303
 * 
 *   def _findNear(self,SashInputVec query,int limit=10,int sampleRate=-1,int scaleFactor=-1):
 *      if (scaleFactor==-1):             # <<<<<<<<<<<<<<
 *        if (sampleRate==-1):
 *          return self.sashinstance.findNear(query.data,  limit)
 */
  __pyx_t_1 = (__pyx_v_scaleFactor == -1);
  if (__pyx_t_1) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":304
 *   def _findNear(self,SashInputVec query,int limit=10,int sampleRate=-1,int scaleFactor=-1):
 *      if (scaleFactor==-1):
 *        if (sampleRate==-1):             # <<<<<<<<<<<<<<
 *          return self.sashinstance.findNear(query.data,  limit)
 *        else:
 */
    __pyx_t_1 = (__pyx_v_sampleRate == -1);
    if (__pyx_t_1) {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":305
 *      if (scaleFactor==-1):
 *        if (sampleRate==-1):
 *          return self.sashinstance.findNear(query.data,  limit)             # <<<<<<<<<<<<<<
 *        else:
 *          return self.sashinstance.findNear_with_sampleRate(query.data,limit,sampleRate)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->findNear(__pyx_v_query->data, __pyx_v_limit)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
      goto __pyx_L7;
    }
    /*else*/ {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":307
 *          return self.sashinstance.findNear(query.data,  limit)
 *        else:
 *          return self.sashinstance.findNear_with_sampleRate(query.data,limit,sampleRate)             # <<<<<<<<<<<<<<
 *      else:
 *        if (sampleRate==-1):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->findNear(__pyx_v_query->data, __pyx_v_limit, __pyx_v_sampleRate)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":309
 *          return self.sashinstance.findNear_with_sampleRate(query.data,limit,sampleRate)
 *      else:
 *        if (sampleRate==-1):             # <<<<<<<<<<<<<<
 *          return self.sashinstance.findNear_with_scaleFactor(query.data,  limit, scaleFactor)
 *        else:
 */
    __pyx_t_1 = (__pyx_v_sampleRate == -1);
    if (__pyx_t_1) {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":310
 *      else:
 *        if (sampleRate==-1):
 *          return self.sashinstance.findNear_with_scaleFactor(query.data,  limit, scaleFactor)             # <<<<<<<<<<<<<<
 *        else:
 *          return self.sashinstance.findNear_full(query.data,limit,sampleRate, scaleFactor)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->findNear(__pyx_v_query->data, __pyx_v_limit, __pyx_v_scaleFactor)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
      goto __pyx_L8;
    }
    /*else*/ {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":312
 *          return self.sashinstance.findNear_with_scaleFactor(query.data,  limit, scaleFactor)
 *        else:
 *          return self.sashinstance.findNear_full(query.data,limit,sampleRate, scaleFactor)             # <<<<<<<<<<<<<<
 * 
 *   def findNear(self,query, *args, **xargs):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->findNear(__pyx_v_query->data, __pyx_v_limit, __pyx_v_sampleRate, __pyx_v_scaleFactor)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
    }
    __pyx_L8:;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysash.Sash._findNear");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":314
 *          return self.sashinstance.findNear_full(query.data,limit,sampleRate, scaleFactor)
 * 
 *   def findNear(self,query, *args, **xargs):             # <<<<<<<<<<<<<<
 *     """ Find a set of approximate nearest neighbours for the specified
 *         query item.
 */

static PyObject *__pyx_pf_6pysash_4Sash_findNear(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pysash_4Sash_findNear[] = " Find a set of approximate nearest neighbours for the specified\n        query item.\n        The number of elements actually found is returned.\n       A \"sampleRate\" of zero indicates a search relative to the entire set.\n        The method also may  use a parameter (\"scaleFactor\")\n          that influences the trade-off between time and accuracy.\n        The default value of this parameter is 1.0 - increasing the value\n          will increase running time (roughly proportionally) and increase\n          the accuracy of the result.\n    ";
static PyObject *__pyx_pf_6pysash_4Sash_findNear(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_query = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_xargs = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,0};
  __Pyx_SetupRefcountContext("findNear");
  __pyx_v_xargs = PyDict_New(); if (unlikely(!__pyx_v_xargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_xargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args)); __Pyx_GOTREF(__pyx_v_args);

    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_xargs);
      return NULL;
    }
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      default:
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      const Py_ssize_t used_pos_args = (PyTuple_GET_SIZE(__pyx_args) < 1) ? PyTuple_GET_SIZE(__pyx_args) : 1;
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_xargs, values, used_pos_args, "findNear") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_query = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findNear", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_AddTraceback("pysash.Sash.findNear");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":325
 *           the accuracy of the result.
 *     """
 *     return self._findNear(SashInputVec(query), *args, **xargs )             # <<<<<<<<<<<<<<
 * 
 *   def getMaxParents (self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__findNear); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_query);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_query);
  __Pyx_GIVEREF(__pyx_v_query);
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6pysash_SashInputVec)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_1 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(__pyx_t_1, __pyx_t_3, __pyx_v_xargs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.Sash.findNear");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":327
 *     return self._findNear(SashInputVec(query), *args, **xargs )
 * 
 *   def getMaxParents (self):             # <<<<<<<<<<<<<<
 *     """ Returns the upper limit on the number of parents per SASH node."""
 *     return self.sashinstance.getMaxParents()
 */

static PyObject *__pyx_pf_6pysash_4Sash_getMaxParents(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_4Sash_getMaxParents[] = " Returns the upper limit on the number of parents per SASH node.";
static PyObject *__pyx_pf_6pysash_4Sash_getMaxParents(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getMaxParents");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":329
 *   def getMaxParents (self):
 *     """ Returns the upper limit on the number of parents per SASH node."""
 *     return self.sashinstance.getMaxParents()             # <<<<<<<<<<<<<<
 * 
 *   def getNumItems (self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->getMaxParents()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.Sash.getMaxParents");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":331
 *     return self.sashinstance.getMaxParents()
 * 
 *   def getNumItems (self):             # <<<<<<<<<<<<<<
 *     """  Returns the number of data items of the SASH. """
 *     return self.sashinstance.getNumItems()
 */

static PyObject *__pyx_pf_6pysash_4Sash_getNumItems(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_4Sash_getNumItems[] = "  Returns the number of data items of the SASH. ";
static PyObject *__pyx_pf_6pysash_4Sash_getNumItems(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getNumItems");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":333
 *   def getNumItems (self):
 *     """  Returns the number of data items of the SASH. """
 *     return self.sashinstance.getNumItems()             # <<<<<<<<<<<<<<
 * 
 *   def getNumLevels (self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->getNumItems()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.Sash.getNumItems");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":335
 *     return self.sashinstance.getNumItems()
 * 
 *   def getNumLevels (self):             # <<<<<<<<<<<<<<
 *     """  Returns the number of levels of the SASH. """
 *     return self.sashinstance.getNumLevels()
 */

static PyObject *__pyx_pf_6pysash_4Sash_getNumLevels(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_4Sash_getNumLevels[] = "  Returns the number of levels of the SASH. ";
static PyObject *__pyx_pf_6pysash_4Sash_getNumLevels(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getNumLevels");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":337
 *   def getNumLevels (self):
 *     """  Returns the number of levels of the SASH. """
 *     return self.sashinstance.getNumLevels()             # <<<<<<<<<<<<<<
 * 
 *   def getNumOrphans (self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->getNumLevels()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.Sash.getNumLevels");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":339
 *     return self.sashinstance.getNumLevels()
 * 
 *   def getNumOrphans (self):             # <<<<<<<<<<<<<<
 *     """Returns the number of orphan nodes encountered during SASH construction. """
 *     return self.sashinstance.getNumOrphans()
 */

static PyObject *__pyx_pf_6pysash_4Sash_getNumOrphans(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_4Sash_getNumOrphans[] = "Returns the number of orphan nodes encountered during SASH construction. ";
static PyObject *__pyx_pf_6pysash_4Sash_getNumOrphans(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getNumOrphans");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":341
 *   def getNumOrphans (self):
 *     """Returns the number of orphan nodes encountered during SASH construction. """
 *     return self.sashinstance.getNumOrphans()             # <<<<<<<<<<<<<<
 * 
 *   def getResultAcc (self,int howMany=1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->getNumOrphans()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.Sash.getNumOrphans");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":343
 *     return self.sashinstance.getNumOrphans()
 * 
 *   def getResultAcc (self,int howMany=1):             # <<<<<<<<<<<<<<
 *     """
 *     Computes the recall accuracy of the most recent query result.
 */

static PyObject *__pyx_pf_6pysash_4Sash_getResultAcc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pysash_4Sash_getResultAcc[] = "\n    Computes the recall accuracy of the most recent query result.\n    A list of the exact distances must be provided, sorted\n      from smallest to largest.\n    The number of exact distances provided determines the size\n      of the neighbourhood within which the accuracy is assessed.\n    The list must contain at least as many entries as the number of\n      items found in the query result.\n    If unsuccessful, a negative value is returned.\n    ";
static PyObject *__pyx_pf_6pysash_4Sash_getResultAcc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_howMany;
  PyObject *__pyx_v_r;
  PyObject *__pyx_v_rf;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_2 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_howMany,0};
  __Pyx_SetupRefcountContext("getResultAcc");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_howMany);
        if (unlikely(value)) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getResultAcc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_howMany = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_howMany == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_howMany = 1;
    }
  } else {
    __pyx_v_howMany = 1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_howMany = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_howMany == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getResultAcc", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.Sash.getResultAcc");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_rf = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":354
 *     If unsuccessful, a negative value is returned.
 *     """
 *     r=numpy.ndarray(shape=(howMany,),dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     rf=self.sashinstance.getResultAcc (<float *> PyArray_DATA(r), howMany)
 *     return r,rf
 */
  __pyx_1 = PyDict_New(); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_1 = PyInt_FromLong(__pyx_v_howMany); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_1, __pyx_kp_shape, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_2 = __Pyx_GetName(__pyx_m, __pyx_kp_numpy); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_2);
  __pyx_t_2 = PyObject_GetAttr(__pyx_2, __pyx_kp_31); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
  if (PyDict_SetItem(__pyx_1, __pyx_kp_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(((PyObject *)((PyObject*)__pyx_ptype_5numpy_ndarray)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __Pyx_DECREF(__pyx_v_r);
  __pyx_v_r = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":355
 *     """
 *     r=numpy.ndarray(shape=(howMany,),dtype=numpy.float32)
 *     rf=self.sashinstance.getResultAcc (<float *> PyArray_DATA(r), howMany)             # <<<<<<<<<<<<<<
 *     return r,rf
 * 
 */
  if (!(__Pyx_TypeTest(__pyx_v_r, __pyx_ptype_5numpy_ndarray))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->getResultAcc(((float *)PyArray_DATA(((PyArrayObject *)__pyx_v_r))), __pyx_v_howMany)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_v_rf);
  __pyx_v_rf = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":356
 *     r=numpy.ndarray(shape=(howMany,),dtype=numpy.float32)
 *     rf=self.sashinstance.getResultAcc (<float *> PyArray_DATA(r), howMany)
 *     return r,rf             # <<<<<<<<<<<<<<
 * 
 *   def getResultDists (self,int maxresults=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_r);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_r);
  __Pyx_GIVEREF(__pyx_v_r);
  __Pyx_INCREF(__pyx_v_rf);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_rf);
  __Pyx_GIVEREF(__pyx_v_rf);
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_2);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysash.Sash.getResultAcc");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_r);
  __Pyx_DECREF(__pyx_v_rf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":358
 *     return r,rf
 * 
 *   def getResultDists (self,int maxresults=-1):             # <<<<<<<<<<<<<<
 *     """
 *       returns q list filled with the query-to-neighbour
 */

static PyObject *__pyx_pf_6pysash_4Sash_getResultDists(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pysash_4Sash_getResultDists[] = "\n      returns q list filled with the query-to-neighbour\n      distances found in the most recent SASH query.\n      If successful, the number of items found is returned.\n      If unsuccessful, zero is returned.\n    ";
static PyObject *__pyx_pf_6pysash_4Sash_getResultDists(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_maxresults;
  PyObject *__pyx_v_r;
  PyObject *__pyx_v_ri;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_2 = 0;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_maxresults,0};
  __Pyx_SetupRefcountContext("getResultDists");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_maxresults);
        if (unlikely(value)) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getResultDists") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_maxresults = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_maxresults == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_maxresults = -1;
    }
  } else {
    __pyx_v_maxresults = -1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_maxresults = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_maxresults == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getResultDists", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.Sash.getResultDists");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_ri = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":365
 *       If unsuccessful, zero is returned.
 *     """
 *     if maxresults==-1:             # <<<<<<<<<<<<<<
 *       maxresults=self.getResultNumFound()
 *       if (maxresults==0):
 */
  __pyx_t_1 = (__pyx_v_maxresults == -1);
  if (__pyx_t_1) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":366
 *     """
 *     if maxresults==-1:
 *       maxresults=self.getResultNumFound()             # <<<<<<<<<<<<<<
 *       if (maxresults==0):
 *          return []
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_getResultNumFound); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_maxresults = __pyx_t_4;

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":367
 *     if maxresults==-1:
 *       maxresults=self.getResultNumFound()
 *       if (maxresults==0):             # <<<<<<<<<<<<<<
 *          return []
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.float32)
 */
    __pyx_t_1 = (__pyx_v_maxresults == 0);
    if (__pyx_t_1) {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":368
 *       maxresults=self.getResultNumFound()
 *       if (maxresults==0):
 *          return []             # <<<<<<<<<<<<<<
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.float32)
 *     ri=self.sashinstance.getResultDists (<float *> PyArray_DATA(r), maxresults)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __pyx_r = ((PyObject *)__pyx_t_3);
      __pyx_t_3 = 0;
      goto __pyx_L0;
      goto __pyx_L7;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":369
 *       if (maxresults==0):
 *          return []
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     ri=self.sashinstance.getResultDists (<float *> PyArray_DATA(r), maxresults)
 *     return r[:ri]
 */
  __pyx_1 = PyDict_New(); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_3 = PyInt_FromLong(__pyx_v_maxresults); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_1, __pyx_kp_shape, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_2 = __Pyx_GetName(__pyx_m, __pyx_kp_numpy); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_2);
  __pyx_t_2 = PyObject_GetAttr(__pyx_2, __pyx_kp_31); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
  if (PyDict_SetItem(__pyx_1, __pyx_kp_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(((PyObject *)((PyObject*)__pyx_ptype_5numpy_ndarray)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __Pyx_DECREF(__pyx_v_r);
  __pyx_v_r = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":370
 *          return []
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.float32)
 *     ri=self.sashinstance.getResultDists (<float *> PyArray_DATA(r), maxresults)             # <<<<<<<<<<<<<<
 *     return r[:ri]
 * 
 */
  if (!(__Pyx_TypeTest(__pyx_v_r, __pyx_ptype_5numpy_ndarray))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->getResultDists(((float *)PyArray_DATA(((PyArrayObject *)__pyx_v_r))), __pyx_v_maxresults)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_v_ri);
  __pyx_v_ri = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":371
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.float32)
 *     ri=self.sashinstance.getResultDists (<float *> PyArray_DATA(r), maxresults)
 *     return r[:ri]             # <<<<<<<<<<<<<<
 * 
 *   def getResultDistComps(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ri); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_2 = PySequence_GetSlice(__pyx_v_r, 0, __pyx_t_5); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_2);
  __pyx_r = __pyx_2;
  __pyx_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_2);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.Sash.getResultDists");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_r);
  __Pyx_DECREF(__pyx_v_ri);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":373
 *     return r[:ri]
 * 
 *   def getResultDistComps(self):             # <<<<<<<<<<<<<<
 *     """
 *      Returns the number of distance computations performed during
 */

static PyObject *__pyx_pf_6pysash_4Sash_getResultDistComps(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_4Sash_getResultDistComps[] = "\n     Returns the number of distance computations performed during\n       the most recent SASH operation.\n    ";
static PyObject *__pyx_pf_6pysash_4Sash_getResultDistComps(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getResultDistComps");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":378
 *        the most recent SASH operation.
 *     """
 *     return self.sashinstance.getResultDistComps ()             # <<<<<<<<<<<<<<
 * 
 *   def getResultIndices(self, int maxresults=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->getResultDistComps()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.Sash.getResultDistComps");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":380
 *     return self.sashinstance.getResultDistComps ()
 * 
 *   def getResultIndices(self, int maxresults=-1):             # <<<<<<<<<<<<<<
 *     """
 *        returns a list with the (external) indices of the
 */

static PyObject *__pyx_pf_6pysash_4Sash_getResultIndices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pysash_4Sash_getResultIndices[] = "\n       returns a list with the (external) indices of the\n       items found in the most recent SASH query.\n       If successful, the number of items found is returned.\n       If unsuccessful, zero is returned.\n    ";
static PyObject *__pyx_pf_6pysash_4Sash_getResultIndices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_maxresults;
  PyObject *__pyx_v_r;
  PyObject *__pyx_v_ri;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_2 = 0;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_maxresults,0};
  __Pyx_SetupRefcountContext("getResultIndices");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_maxresults);
        if (unlikely(value)) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getResultIndices") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_maxresults = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_maxresults == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_maxresults = -1;
    }
  } else {
    __pyx_v_maxresults = -1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_maxresults = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_maxresults == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getResultIndices", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.Sash.getResultIndices");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_ri = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":387
 *        If unsuccessful, zero is returned.
 *     """
 *     if maxresults==-1:             # <<<<<<<<<<<<<<
 *      maxresults=self.getResultNumFound()
 *      if (maxresults==0):
 */
  __pyx_t_1 = (__pyx_v_maxresults == -1);
  if (__pyx_t_1) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":388
 *     """
 *     if maxresults==-1:
 *      maxresults=self.getResultNumFound()             # <<<<<<<<<<<<<<
 *      if (maxresults==0):
 *         return []
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_getResultNumFound); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_maxresults = __pyx_t_4;

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":389
 *     if maxresults==-1:
 *      maxresults=self.getResultNumFound()
 *      if (maxresults==0):             # <<<<<<<<<<<<<<
 *         return []
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.uint32)
 */
    __pyx_t_1 = (__pyx_v_maxresults == 0);
    if (__pyx_t_1) {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":390
 *      maxresults=self.getResultNumFound()
 *      if (maxresults==0):
 *         return []             # <<<<<<<<<<<<<<
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.uint32)
 *     ri=self.sashinstance.getResultIndices (<int *> PyArray_DATA(r), maxresults)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __pyx_r = ((PyObject *)__pyx_t_3);
      __pyx_t_3 = 0;
      goto __pyx_L0;
      goto __pyx_L7;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":391
 *      if (maxresults==0):
 *         return []
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.uint32)             # <<<<<<<<<<<<<<
 *     ri=self.sashinstance.getResultIndices (<int *> PyArray_DATA(r), maxresults)
 *     return r[:ri]
 */
  __pyx_1 = PyDict_New(); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_3 = PyInt_FromLong(__pyx_v_maxresults); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_1, __pyx_kp_shape, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_2 = __Pyx_GetName(__pyx_m, __pyx_kp_numpy); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_2);
  __pyx_t_2 = PyObject_GetAttr(__pyx_2, __pyx_kp_32); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
  if (PyDict_SetItem(__pyx_1, __pyx_kp_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(((PyObject *)((PyObject*)__pyx_ptype_5numpy_ndarray)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __Pyx_DECREF(__pyx_v_r);
  __pyx_v_r = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":392
 *         return []
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.uint32)
 *     ri=self.sashinstance.getResultIndices (<int *> PyArray_DATA(r), maxresults)             # <<<<<<<<<<<<<<
 *     return r[:ri]
 * 
 */
  if (!(__Pyx_TypeTest(__pyx_v_r, __pyx_ptype_5numpy_ndarray))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->getResultIndices(((int *)PyArray_DATA(((PyArrayObject *)__pyx_v_r))), __pyx_v_maxresults)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_v_ri);
  __pyx_v_ri = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":393
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.uint32)
 *     ri=self.sashinstance.getResultIndices (<int *> PyArray_DATA(r), maxresults)
 *     return r[:ri]             # <<<<<<<<<<<<<<
 * 
 *   def getResultNumFound(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ri); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_2 = PySequence_GetSlice(__pyx_v_r, 0, __pyx_t_5); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_2);
  __pyx_r = __pyx_2;
  __pyx_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_2);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.Sash.getResultIndices");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_r);
  __Pyx_DECREF(__pyx_v_ri);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":395
 *     return r[:ri]
 * 
 *   def getResultNumFound(self):             # <<<<<<<<<<<<<<
 *     """
 *      Returns the number of items found in the most recent query.
 */

static PyObject *__pyx_pf_6pysash_4Sash_getResultNumFound(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_4Sash_getResultNumFound[] = "\n     Returns the number of items found in the most recent query.\n    ";
static PyObject *__pyx_pf_6pysash_4Sash_getResultNumFound(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getResultNumFound");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":399
 *      Returns the number of items found in the most recent query.
 *     """
 *     return self.sashinstance.getResultNumFound ()             # <<<<<<<<<<<<<<
 * 
 *   def getResultSampleSize (self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->getResultNumFound()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.Sash.getResultNumFound");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":401
 *     return self.sashinstance.getResultNumFound ()
 * 
 *   def getResultSampleSize (self):             # <<<<<<<<<<<<<<
 *     """
 *     Returns the sample size used in the most recent query.
 */

static PyObject *__pyx_pf_6pysash_4Sash_getResultSampleSize(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_4Sash_getResultSampleSize[] = "\n    Returns the sample size used in the most recent query.\n    ";
static PyObject *__pyx_pf_6pysash_4Sash_getResultSampleSize(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getResultSampleSize");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":405
 *     Returns the sample size used in the most recent query.
 *     """
 *     return self.sashinstance.getResultSampleSize()             # <<<<<<<<<<<<<<
 * 
 *   def getRNGSeed(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->getResultSampleSize()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.Sash.getResultSampleSize");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":407
 *     return self.sashinstance.getResultSampleSize()
 * 
 *   def getRNGSeed(self):             # <<<<<<<<<<<<<<
 *     """
 *      Returns the seed value used for random number generator initialization.
 */

static PyObject *__pyx_pf_6pysash_4Sash_getRNGSeed(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_4Sash_getRNGSeed[] = "\n     Returns the seed value used for random number generator initialization.\n    ";
static PyObject *__pyx_pf_6pysash_4Sash_getRNGSeed(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getRNGSeed");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":411
 *      Returns the seed value used for random number generator initialization.
 *     """
 *     return self.sashinstance.getRNGSeed ()             # <<<<<<<<<<<<<<
 * 
 *   def resetQuery(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->getRNGSeed()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.Sash.getRNGSeed");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":413
 *     return self.sashinstance.getRNGSeed ()
 * 
 *   def resetQuery(self):             # <<<<<<<<<<<<<<
 *      """
 *        Resets the current query object to NULL.
 */

static PyObject *__pyx_pf_6pysash_4Sash_resetQuery(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_4Sash_resetQuery[] = "\n       Resets the current query object to NULL.\n       This has the effect of clearing any saved distances - subsequent\n       findNear and findNearest operations would be forced to compute\n       all needed distances from scratch.\n     ";
static PyObject *__pyx_pf_6pysash_4Sash_resetQuery(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("resetQuery");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":420
 *        all needed distances from scratch.
 *      """
 *      self.sashinstance.resetQuery ()             # <<<<<<<<<<<<<<
 * 
 *   def save(self,filename):
 */
  ((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->resetQuery();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":422
 *      self.sashinstance.resetQuery ()
 * 
 *   def save(self,filename):             # <<<<<<<<<<<<<<
 *     """
 *      Save the SASH to the specified file.
 */

static PyObject *__pyx_pf_6pysash_4Sash_save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_6pysash_4Sash_save[] = "\n     Save the SASH to the specified file.\n     The extension \".sash\" is automatically appended to the file name.\n     If successful, the number of SASH items is returned.\n     If unsuccessful, zero is returned.\n    ";
static PyObject *__pyx_pf_6pysash_4Sash_save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  int __pyx_t_2;
  __Pyx_SetupRefcountContext("save");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":429
 *      If unsuccessful, zero is returned.
 *     """
 *     if (not self.sashinstance.saveToFile(filename)):             # <<<<<<<<<<<<<<
 *       raise IOError, "unable to save sash"
 * 
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!((struct __pyx_obj_6pysash_Sash *)__pyx_v_self)->sashinstance->saveToFile(__pyx_t_1));
  if (__pyx_t_2) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":430
 *     """
 *     if (not self.sashinstance.saveToFile(filename)):
 *       raise IOError, "unable to save sash"             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_Raise(__pyx_builtin_IOError, __pyx_kp_33, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysash.Sash.save");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":441
 *   cdef object distance
 *   cdef object persistent_data
 *   def get_persistent_data(self):             # <<<<<<<<<<<<<<
 *     return self.persistent_data
 *   def __init__(self,distance,seed=0):
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_get_persistent_data(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_6pysash_11GenericSash_get_persistent_data(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("get_persistent_data");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":442
 *   cdef object persistent_data
 *   def get_persistent_data(self):
 *     return self.persistent_data             # <<<<<<<<<<<<<<
 *   def __init__(self,distance,seed=0):
 *     """
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->persistent_data);
  __pyx_r = ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->persistent_data;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":443
 *   def get_persistent_data(self):
 *     return self.persistent_data
 *   def __init__(self,distance,seed=0):             # <<<<<<<<<<<<<<
 *     """
 *      Constructor with optional seed for random number generator initialization.
 */

static int __pyx_pf_6pysash_11GenericSash___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pysash_11GenericSash___init__[] = "\n     Constructor with optional seed for random number generator initialization.\n    ";
static int __pyx_pf_6pysash_11GenericSash___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_distance = 0;
  PyObject *__pyx_v_seed = 0;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned long __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_distance,&__pyx_kp_seed,0};
  __Pyx_SetupRefcountContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    values[1] = __pyx_int_0;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_distance);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_seed);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_distance = values[0];
    __pyx_v_seed = values[1];
  } else {
    __pyx_v_seed = __pyx_int_0;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_seed = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: __pyx_v_distance = PyTuple_GET_ITEM(__pyx_args, 0);
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.GenericSash.__init__");
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":447
 *      Constructor with optional seed for random number generator initialization.
 *     """
 *     if (not seed):             # <<<<<<<<<<<<<<
 *       self.sashinstance=new_Sash()
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_seed); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":448
 *     """
 *     if (not seed):
 *       self.sashinstance=new_Sash()             # <<<<<<<<<<<<<<
 *     else:
 *       self.sashinstance=new_Sash_with_seed(seed)
 */
    ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance = new Sash();
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":450
 *       self.sashinstance=new_Sash()
 *     else:
 *       self.sashinstance=new_Sash_with_seed(seed)             # <<<<<<<<<<<<<<
 *     self.distance=distance
 *     self.persistent_data=None
 */
    __pyx_t_3 = __Pyx_PyInt_AsUnsignedLong(__pyx_v_seed); if (unlikely((__pyx_t_3 == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance = new Sash(__pyx_t_3);
  }
  __pyx_L6:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":451
 *     else:
 *       self.sashinstance=new_Sash_with_seed(seed)
 *     self.distance=distance             # <<<<<<<<<<<<<<
 *     self.persistent_data=None
 *   def _build(self,SashInputArrayPython arr,filename=None,numParents=None):
 */
  __Pyx_INCREF(__pyx_v_distance);
  __Pyx_GIVEREF(__pyx_v_distance);
  __Pyx_GOTREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  __Pyx_DECREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance = __pyx_v_distance;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":452
 *       self.sashinstance=new_Sash_with_seed(seed)
 *     self.distance=distance
 *     self.persistent_data=None             # <<<<<<<<<<<<<<
 *   def _build(self,SashInputArrayPython arr,filename=None,numParents=None):
 *     if (filename):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->persistent_data);
  __Pyx_DECREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->persistent_data);
  ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->persistent_data = Py_None;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysash.GenericSash.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":453
 *     self.distance=distance
 *     self.persistent_data=None
 *   def _build(self,SashInputArrayPython arr,filename=None,numParents=None):             # <<<<<<<<<<<<<<
 *     if (filename):
 *       self.sashinstance.build_with_filename(filename,arr.data, arr.numItems)
 */

static PyObject *__pyx_pf_6pysash_11GenericSash__build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6pysash_11GenericSash__build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pysash_SashInputArrayPython *__pyx_v_arr = 0;
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_numParents = 0;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  char *__pyx_t_2;
  int __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_arr,&__pyx_kp_filename,&__pyx_kp_numParents,0};
  __Pyx_SetupRefcountContext("_build");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    values[1] = Py_None;
    values[2] = Py_None;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_arr);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_filename);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_numParents);
        if (unlikely(value)) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_build") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_arr = ((struct __pyx_obj_6pysash_SashInputArrayPython *)values[0]);
    __pyx_v_filename = values[1];
    __pyx_v_numParents = values[2];
  } else {
    __pyx_v_filename = Py_None;
    __pyx_v_numParents = Py_None;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_numParents = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: __pyx_v_filename = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: __pyx_v_arr = ((struct __pyx_obj_6pysash_SashInputArrayPython *)PyTuple_GET_ITEM(__pyx_args, 0));
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_build", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.GenericSash._build");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_arr), __pyx_ptype_6pysash_SashInputArrayPython, 1, "arr", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":454
 *     self.persistent_data=None
 *   def _build(self,SashInputArrayPython arr,filename=None,numParents=None):
 *     if (filename):             # <<<<<<<<<<<<<<
 *       self.sashinstance.build_with_filename(filename,arr.data, arr.numItems)
 *     else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_filename); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":455
 *   def _build(self,SashInputArrayPython arr,filename=None,numParents=None):
 *     if (filename):
 *       self.sashinstance.build_with_filename(filename,arr.data, arr.numItems)             # <<<<<<<<<<<<<<
 *     else:
 *        if (numParents):
 */
    __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->build(__pyx_t_2, __pyx_v_arr->data, __pyx_v_arr->numItems);
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":457
 *       self.sashinstance.build_with_filename(filename,arr.data, arr.numItems)
 *     else:
 *        if (numParents):             # <<<<<<<<<<<<<<
 *          self.sashinstance.build_with_numParents(arr.data, arr.numItems,numParents)
 *        else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_numParents); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_1) {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":458
 *     else:
 *        if (numParents):
 *          self.sashinstance.build_with_numParents(arr.data, arr.numItems,numParents)             # <<<<<<<<<<<<<<
 *        else:
 *          self.sashinstance.build(arr.data, arr.numItems)
 */
      __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_numParents); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->build(__pyx_v_arr->data, __pyx_v_arr->numItems, __pyx_t_3);
      goto __pyx_L7;
    }
    /*else*/ {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":460
 *          self.sashinstance.build_with_numParents(arr.data, arr.numItems,numParents)
 *        else:
 *          self.sashinstance.build(arr.data, arr.numItems)             # <<<<<<<<<<<<<<
 * 
 *   def build(self,arr,*args,**xargs):
 */
      ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->build(__pyx_v_arr->data, __pyx_v_arr->numItems);
    }
    __pyx_L7:;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysash.GenericSash._build");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":462
 *          self.sashinstance.build(arr.data, arr.numItems)
 * 
 *   def build(self,arr,*args,**xargs):             # <<<<<<<<<<<<<<
 *     """
 *      Constructs or load a new sash from a file.
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_build[] = "\n     Constructs or load a new sash from a file.\n     When no numParents is specified  the default is assumed to be 4.\n    ";
static PyObject *__pyx_pf_6pysash_11GenericSash_build(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arr = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_xargs = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_arr,0};
  __Pyx_SetupRefcountContext("build");
  __pyx_v_xargs = PyDict_New(); if (unlikely(!__pyx_v_xargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_xargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args)); __Pyx_GOTREF(__pyx_v_args);

    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_xargs);
      return NULL;
    }
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      default:
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_arr);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      const Py_ssize_t used_pos_args = (PyTuple_GET_SIZE(__pyx_args) < 1) ? PyTuple_GET_SIZE(__pyx_args) : 1;
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_xargs, values, used_pos_args, "build") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_arr = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_arr = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("build", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_AddTraceback("pysash.GenericSash.build");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":467
 *      When no numParents is specified  the default is assumed to be 4.
 *     """
 *     self.persistent_data=SashInputArrayPython(arr,self.distance)             # <<<<<<<<<<<<<<
 *     return self._build(self.persistent_data,*args,**xargs)
 * 
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_arr);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_arr);
  __Pyx_GIVEREF(__pyx_v_arr);
  __Pyx_INCREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  __Pyx_GIVEREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6pysash_SashInputArrayPython)), ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->persistent_data);
  __Pyx_DECREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->persistent_data);
  ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->persistent_data = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":468
 *     """
 *     self.persistent_data=SashInputArrayPython(arr,self.distance)
 *     return self._build(self.persistent_data,*args,**xargs)             # <<<<<<<<<<<<<<
 * 
 *   def _findAllInBall(self,SashInputVecPython query,float radius=10,int sampleRate=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__build); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->persistent_data);
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->persistent_data);
  __Pyx_GIVEREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->persistent_data);
  __pyx_1 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_t_1), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __pyx_t_1 = PyEval_CallObjectWithKeywords(__pyx_t_2, __pyx_t_3, __pyx_v_xargs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.GenericSash.build");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":470
 *     return self._build(self.persistent_data,*args,**xargs)
 * 
 *   def _findAllInBall(self,SashInputVecPython query,float radius=10,int sampleRate=-1):             # <<<<<<<<<<<<<<
 *      if (sampleRate==-1):
 *        return self.sashinstance.findAllInRange(query.data, radius)
 */

static PyObject *__pyx_pf_6pysash_11GenericSash__findAllInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6pysash_11GenericSash__findAllInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pysash_SashInputVecPython *__pyx_v_query = 0;
  float __pyx_v_radius;
  int __pyx_v_sampleRate;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,&__pyx_kp_radius,&__pyx_kp_sampleRate,0};
  __Pyx_SetupRefcountContext("_findAllInBall");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_radius);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_sampleRate);
        if (unlikely(value)) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_findAllInBall") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVecPython *)values[0]);
    if (values[1]) {
      __pyx_v_radius = __pyx_PyFloat_AsDouble(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_radius = ((float)10);
    }
    if (values[2]) {
      __pyx_v_sampleRate = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sampleRate = -1;
    }
  } else {
    __pyx_v_radius = ((float)10);
    __pyx_v_sampleRate = -1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_sampleRate = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_radius = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVecPython *)PyTuple_GET_ITEM(__pyx_args, 0));
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_findAllInBall", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.GenericSash._findAllInBall");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_query), __pyx_ptype_6pysash_SashInputVecPython, 1, "query", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":471
 * 
 *   def _findAllInBall(self,SashInputVecPython query,float radius=10,int sampleRate=-1):
 *      if (sampleRate==-1):             # <<<<<<<<<<<<<<
 *        return self.sashinstance.findAllInRange(query.data, radius)
 *      else:
 */
  __pyx_t_1 = (__pyx_v_sampleRate == -1);
  if (__pyx_t_1) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":472
 *   def _findAllInBall(self,SashInputVecPython query,float radius=10,int sampleRate=-1):
 *      if (sampleRate==-1):
 *        return self.sashinstance.findAllInRange(query.data, radius)             # <<<<<<<<<<<<<<
 *      else:
 *        return self.sashinstance.findAllInRange_with_sampleRate(query.data,radius,sampleRate)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->findAllInRange(__pyx_v_query->data, __pyx_v_radius)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":474
 *        return self.sashinstance.findAllInRange(query.data, radius)
 *      else:
 *        return self.sashinstance.findAllInRange_with_sampleRate(query.data,radius,sampleRate)             # <<<<<<<<<<<<<<
 * 
 *   def findAllInBall(self,query, *args, **xargs):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->findAllInRange(__pyx_v_query->data, __pyx_v_radius, __pyx_v_sampleRate)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysash.GenericSash._findAllInBall");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":476
 *        return self.sashinstance.findAllInRange_with_sampleRate(query.data,radius,sampleRate)
 * 
 *   def findAllInBall(self,query, *args, **xargs):             # <<<<<<<<<<<<<<
 *     return self._findAllInBall(SashInputVecPython(query,self.distance), *args, **xargs )
 * 
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_findAllInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6pysash_11GenericSash_findAllInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_query = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_xargs = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,0};
  __Pyx_SetupRefcountContext("findAllInBall");
  __pyx_v_xargs = PyDict_New(); if (unlikely(!__pyx_v_xargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_xargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args)); __Pyx_GOTREF(__pyx_v_args);

    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_xargs);
      return NULL;
    }
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      default:
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      const Py_ssize_t used_pos_args = (PyTuple_GET_SIZE(__pyx_args) < 1) ? PyTuple_GET_SIZE(__pyx_args) : 1;
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_xargs, values, used_pos_args, "findAllInBall") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_query = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findAllInBall", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_AddTraceback("pysash.GenericSash.findAllInBall");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":477
 * 
 *   def findAllInBall(self,query, *args, **xargs):
 *     return self._findAllInBall(SashInputVecPython(query,self.distance), *args, **xargs )             # <<<<<<<<<<<<<<
 * 
 *   def _findMostInBall(self,SashInputVecPython query,float radius=10,int sampleRate=-1,int scaleFactor=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__findAllInBall); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_query);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_query);
  __Pyx_GIVEREF(__pyx_v_query);
  __Pyx_INCREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  __Pyx_GIVEREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6pysash_SashInputVecPython)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_1 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(__pyx_t_1, __pyx_t_3, __pyx_v_xargs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.GenericSash.findAllInBall");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":479
 *     return self._findAllInBall(SashInputVecPython(query,self.distance), *args, **xargs )
 * 
 *   def _findMostInBall(self,SashInputVecPython query,float radius=10,int sampleRate=-1,int scaleFactor=-1):             # <<<<<<<<<<<<<<
 *      if (scaleFactor==-1):
 *        if (sampleRate==-1):
 */

static PyObject *__pyx_pf_6pysash_11GenericSash__findMostInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6pysash_11GenericSash__findMostInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pysash_SashInputVecPython *__pyx_v_query = 0;
  float __pyx_v_radius;
  int __pyx_v_sampleRate;
  int __pyx_v_scaleFactor;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,&__pyx_kp_radius,&__pyx_kp_sampleRate,&__pyx_kp_scaleFactor,0};
  __Pyx_SetupRefcountContext("_findMostInBall");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_radius);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_sampleRate);
        if (unlikely(value)) { values[2] = value; kw_args--; }
      }
      case  3:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_scaleFactor);
        if (unlikely(value)) { values[3] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_findMostInBall") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVecPython *)values[0]);
    if (values[1]) {
      __pyx_v_radius = __pyx_PyFloat_AsDouble(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_radius = ((float)10);
    }
    if (values[2]) {
      __pyx_v_sampleRate = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sampleRate = -1;
    }
    if (values[3]) {
      __pyx_v_scaleFactor = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_scaleFactor == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_scaleFactor = -1;
    }
  } else {
    __pyx_v_radius = ((float)10);
    __pyx_v_sampleRate = -1;
    __pyx_v_scaleFactor = -1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: __pyx_v_scaleFactor = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_scaleFactor == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  3: __pyx_v_sampleRate = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_radius = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVecPython *)PyTuple_GET_ITEM(__pyx_args, 0));
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_findMostInBall", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.GenericSash._findMostInBall");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_query), __pyx_ptype_6pysash_SashInputVecPython, 1, "query", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":480
 * 
 *   def _findMostInBall(self,SashInputVecPython query,float radius=10,int sampleRate=-1,int scaleFactor=-1):
 *      if (scaleFactor==-1):             # <<<<<<<<<<<<<<
 *        if (sampleRate==-1):
 *          return self.sashinstance.findMostInRange(query.data, radius)
 */
  __pyx_t_1 = (__pyx_v_scaleFactor == -1);
  if (__pyx_t_1) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":481
 *   def _findMostInBall(self,SashInputVecPython query,float radius=10,int sampleRate=-1,int scaleFactor=-1):
 *      if (scaleFactor==-1):
 *        if (sampleRate==-1):             # <<<<<<<<<<<<<<
 *          return self.sashinstance.findMostInRange(query.data, radius)
 *        else:
 */
    __pyx_t_1 = (__pyx_v_sampleRate == -1);
    if (__pyx_t_1) {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":482
 *      if (scaleFactor==-1):
 *        if (sampleRate==-1):
 *          return self.sashinstance.findMostInRange(query.data, radius)             # <<<<<<<<<<<<<<
 *        else:
 *          return self.sashinstance.findMostInRange_with_sampleRate(query.data,radius,sampleRate)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->findMostInRange(__pyx_v_query->data, __pyx_v_radius)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
      goto __pyx_L7;
    }
    /*else*/ {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":484
 *          return self.sashinstance.findMostInRange(query.data, radius)
 *        else:
 *          return self.sashinstance.findMostInRange_with_sampleRate(query.data,radius,sampleRate)             # <<<<<<<<<<<<<<
 *      else:
 *        if (sampleRate==-1):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->findMostInRange(__pyx_v_query->data, __pyx_v_radius, __pyx_v_sampleRate)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":486
 *          return self.sashinstance.findMostInRange_with_sampleRate(query.data,radius,sampleRate)
 *      else:
 *        if (sampleRate==-1):             # <<<<<<<<<<<<<<
 *          return self.sashinstance.findMostInRange_with_scaleFactor(query.data,  radius, scaleFactor)
 *        else:
 */
    __pyx_t_1 = (__pyx_v_sampleRate == -1);
    if (__pyx_t_1) {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":487
 *      else:
 *        if (sampleRate==-1):
 *          return self.sashinstance.findMostInRange_with_scaleFactor(query.data,  radius, scaleFactor)             # <<<<<<<<<<<<<<
 *        else:
 *          return self.sashinstance.findMostInRange_full(query.data,radius,sampleRate, scaleFactor)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->findMostInRange(__pyx_v_query->data, __pyx_v_radius, __pyx_v_scaleFactor)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
      goto __pyx_L8;
    }
    /*else*/ {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":489
 *          return self.sashinstance.findMostInRange_with_scaleFactor(query.data,  radius, scaleFactor)
 *        else:
 *          return self.sashinstance.findMostInRange_full(query.data,radius,sampleRate, scaleFactor)             # <<<<<<<<<<<<<<
 * 
 *   def findMostInBall(self,query, *args, **xargs):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->findMostInRange(__pyx_v_query->data, __pyx_v_radius, __pyx_v_sampleRate, __pyx_v_scaleFactor)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
    }
    __pyx_L8:;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysash.GenericSash._findMostInBall");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":491
 *          return self.sashinstance.findMostInRange_full(query.data,radius,sampleRate, scaleFactor)
 * 
 *   def findMostInBall(self,query, *args, **xargs):             # <<<<<<<<<<<<<<
 *     """
 *     * Perform an approximate range query for the specified item.
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_findMostInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_findMostInBall[] = "\n    * Perform an approximate range query for the specified item.\n    * The upper limit on the query-to-item distance must be supplied (radius).\n    * The number of elements actually found is returned.\n    * The search may be relative to a data sample of size N / 2^r,\n    *   where N is the number of items in the set, and r is \n    *   a non-negative integer (\"sampleRate\").\n    * A \"sampleRate\" of zero indicates a search relative to the entire set.\n    * The method may also makes use of a parameter (\"scaleFactor\")\n    *   that influences the trade-off between time and accuracy.\n    * The default value of this parameter is 1.0 - increasing the value\n    *   will increase running time (roughly proportionally) and increase\n    *   the accuracy of the result.\n    ";
static PyObject *__pyx_pf_6pysash_11GenericSash_findMostInBall(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_query = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_xargs = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,0};
  __Pyx_SetupRefcountContext("findMostInBall");
  __pyx_v_xargs = PyDict_New(); if (unlikely(!__pyx_v_xargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_xargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args)); __Pyx_GOTREF(__pyx_v_args);

    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_xargs);
      return NULL;
    }
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      default:
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      const Py_ssize_t used_pos_args = (PyTuple_GET_SIZE(__pyx_args) < 1) ? PyTuple_GET_SIZE(__pyx_args) : 1;
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_xargs, values, used_pos_args, "findMostInBall") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_query = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findMostInBall", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_AddTraceback("pysash.GenericSash.findMostInBall");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":506
 *     *   the accuracy of the result.
 *     """
 *     return self._findMostInBall(SashInputVecPython(query,self.distance), *args, **xargs )             # <<<<<<<<<<<<<<
 * 
 *   def _findNearest(self, SashInputVecPython query, int limit=10, int sampleRate=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__findMostInBall); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_query);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_query);
  __Pyx_GIVEREF(__pyx_v_query);
  __Pyx_INCREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  __Pyx_GIVEREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6pysash_SashInputVecPython)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_1 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(__pyx_t_1, __pyx_t_3, __pyx_v_xargs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.GenericSash.findMostInBall");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":508
 *     return self._findMostInBall(SashInputVecPython(query,self.distance), *args, **xargs )
 * 
 *   def _findNearest(self, SashInputVecPython query, int limit=10, int sampleRate=-1):             # <<<<<<<<<<<<<<
 *      if (sampleRate==-1):
 *        return self.sashinstance.findNearest(query.data , limit)
 */

static PyObject *__pyx_pf_6pysash_11GenericSash__findNearest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6pysash_11GenericSash__findNearest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pysash_SashInputVecPython *__pyx_v_query = 0;
  int __pyx_v_limit;
  int __pyx_v_sampleRate;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,&__pyx_kp_limit,&__pyx_kp_sampleRate,0};
  __Pyx_SetupRefcountContext("_findNearest");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_limit);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_sampleRate);
        if (unlikely(value)) { values[2] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_findNearest") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVecPython *)values[0]);
    if (values[1]) {
      __pyx_v_limit = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_limit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_limit = 10;
    }
    if (values[2]) {
      __pyx_v_sampleRate = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sampleRate = -1;
    }
  } else {
    __pyx_v_limit = 10;
    __pyx_v_sampleRate = -1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: __pyx_v_sampleRate = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_limit = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_limit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVecPython *)PyTuple_GET_ITEM(__pyx_args, 0));
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_findNearest", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.GenericSash._findNearest");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_query), __pyx_ptype_6pysash_SashInputVecPython, 1, "query", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":509
 * 
 *   def _findNearest(self, SashInputVecPython query, int limit=10, int sampleRate=-1):
 *      if (sampleRate==-1):             # <<<<<<<<<<<<<<
 *        return self.sashinstance.findNearest(query.data , limit)
 *      else:
 */
  __pyx_t_1 = (__pyx_v_sampleRate == -1);
  if (__pyx_t_1) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":510
 *   def _findNearest(self, SashInputVecPython query, int limit=10, int sampleRate=-1):
 *      if (sampleRate==-1):
 *        return self.sashinstance.findNearest(query.data , limit)             # <<<<<<<<<<<<<<
 *      else:
 *        return self.sashinstance.findNearest_full(query.data,limit,sampleRate)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->findNearest(__pyx_v_query->data, __pyx_v_limit)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":512
 *        return self.sashinstance.findNearest(query.data , limit)
 *      else:
 *        return self.sashinstance.findNearest_full(query.data,limit,sampleRate)             # <<<<<<<<<<<<<<
 * 
 *   def findNearest(self,query, *args, **xargs):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->findNearest(__pyx_v_query->data, __pyx_v_limit, __pyx_v_sampleRate)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 512; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysash.GenericSash._findNearest");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":514
 *        return self.sashinstance.findNearest_full(query.data,limit,sampleRate)
 * 
 *   def findNearest(self,query, *args, **xargs):             # <<<<<<<<<<<<<<
 *     return self._findNearest(SashInputVecPython(query,self.distance), *args, **xargs )
 * 
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_findNearest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6pysash_11GenericSash_findNearest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_query = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_xargs = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,0};
  __Pyx_SetupRefcountContext("findNearest");
  __pyx_v_xargs = PyDict_New(); if (unlikely(!__pyx_v_xargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_xargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args)); __Pyx_GOTREF(__pyx_v_args);

    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_xargs);
      return NULL;
    }
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      default:
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      const Py_ssize_t used_pos_args = (PyTuple_GET_SIZE(__pyx_args) < 1) ? PyTuple_GET_SIZE(__pyx_args) : 1;
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_xargs, values, used_pos_args, "findNearest") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_query = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findNearest", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_AddTraceback("pysash.GenericSash.findNearest");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":515
 * 
 *   def findNearest(self,query, *args, **xargs):
 *     return self._findNearest(SashInputVecPython(query,self.distance), *args, **xargs )             # <<<<<<<<<<<<<<
 * 
 *   def _findNear(self,SashInputVecPython query,int limit=10,int sampleRate=-1,int scaleFactor=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__findNearest); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_query);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_query);
  __Pyx_GIVEREF(__pyx_v_query);
  __Pyx_INCREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  __Pyx_GIVEREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6pysash_SashInputVecPython)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_1 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(__pyx_t_1, __pyx_t_3, __pyx_v_xargs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 515; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.GenericSash.findNearest");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":517
 *     return self._findNearest(SashInputVecPython(query,self.distance), *args, **xargs )
 * 
 *   def _findNear(self,SashInputVecPython query,int limit=10,int sampleRate=-1,int scaleFactor=-1):             # <<<<<<<<<<<<<<
 *      if (scaleFactor==-1):
 *        if (sampleRate==-1):
 */

static PyObject *__pyx_pf_6pysash_11GenericSash__findNear(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_6pysash_11GenericSash__findNear(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6pysash_SashInputVecPython *__pyx_v_query = 0;
  int __pyx_v_limit;
  int __pyx_v_sampleRate;
  int __pyx_v_scaleFactor;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,&__pyx_kp_limit,&__pyx_kp_sampleRate,&__pyx_kp_scaleFactor,0};
  __Pyx_SetupRefcountContext("_findNear");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_limit);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
      case  2:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_sampleRate);
        if (unlikely(value)) { values[2] = value; kw_args--; }
      }
      case  3:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_scaleFactor);
        if (unlikely(value)) { values[3] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "_findNear") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVecPython *)values[0]);
    if (values[1]) {
      __pyx_v_limit = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_limit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_limit = 10;
    }
    if (values[2]) {
      __pyx_v_sampleRate = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_sampleRate = -1;
    }
    if (values[3]) {
      __pyx_v_scaleFactor = __Pyx_PyInt_AsInt(values[3]); if (unlikely((__pyx_v_scaleFactor == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_scaleFactor = -1;
    }
  } else {
    __pyx_v_limit = 10;
    __pyx_v_sampleRate = -1;
    __pyx_v_scaleFactor = -1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: __pyx_v_scaleFactor = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely((__pyx_v_scaleFactor == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  3: __pyx_v_sampleRate = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_sampleRate == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  2: __pyx_v_limit = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_limit == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  1: __pyx_v_query = ((struct __pyx_obj_6pysash_SashInputVecPython *)PyTuple_GET_ITEM(__pyx_args, 0));
      break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_findNear", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.GenericSash._findNear");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_query), __pyx_ptype_6pysash_SashInputVecPython, 1, "query", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":518
 * 
 *   def _findNear(self,SashInputVecPython query,int limit=10,int sampleRate=-1,int scaleFactor=-1):
 *      if (scaleFactor==-1):             # <<<<<<<<<<<<<<
 *        if (sampleRate==-1):
 *          return self.sashinstance.findNear(query.data,  limit)
 */
  __pyx_t_1 = (__pyx_v_scaleFactor == -1);
  if (__pyx_t_1) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":519
 *   def _findNear(self,SashInputVecPython query,int limit=10,int sampleRate=-1,int scaleFactor=-1):
 *      if (scaleFactor==-1):
 *        if (sampleRate==-1):             # <<<<<<<<<<<<<<
 *          return self.sashinstance.findNear(query.data,  limit)
 *        else:
 */
    __pyx_t_1 = (__pyx_v_sampleRate == -1);
    if (__pyx_t_1) {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":520
 *      if (scaleFactor==-1):
 *        if (sampleRate==-1):
 *          return self.sashinstance.findNear(query.data,  limit)             # <<<<<<<<<<<<<<
 *        else:
 *          return self.sashinstance.findNear_with_sampleRate(query.data,limit,sampleRate)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->findNear(__pyx_v_query->data, __pyx_v_limit)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 520; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
      goto __pyx_L7;
    }
    /*else*/ {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":522
 *          return self.sashinstance.findNear(query.data,  limit)
 *        else:
 *          return self.sashinstance.findNear_with_sampleRate(query.data,limit,sampleRate)             # <<<<<<<<<<<<<<
 *      else:
 *        if (sampleRate==-1):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->findNear(__pyx_v_query->data, __pyx_v_limit, __pyx_v_sampleRate)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 522; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":524
 *          return self.sashinstance.findNear_with_sampleRate(query.data,limit,sampleRate)
 *      else:
 *        if (sampleRate==-1):             # <<<<<<<<<<<<<<
 *          return self.sashinstance.findNear_with_scaleFactor(query.data,  limit, scaleFactor)
 *        else:
 */
    __pyx_t_1 = (__pyx_v_sampleRate == -1);
    if (__pyx_t_1) {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":525
 *      else:
 *        if (sampleRate==-1):
 *          return self.sashinstance.findNear_with_scaleFactor(query.data,  limit, scaleFactor)             # <<<<<<<<<<<<<<
 *        else:
 *          return self.sashinstance.findNear_full(query.data,limit,sampleRate, scaleFactor)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->findNear(__pyx_v_query->data, __pyx_v_limit, __pyx_v_scaleFactor)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
      goto __pyx_L8;
    }
    /*else*/ {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":527
 *          return self.sashinstance.findNear_with_scaleFactor(query.data,  limit, scaleFactor)
 *        else:
 *          return self.sashinstance.findNear_full(query.data,limit,sampleRate, scaleFactor)             # <<<<<<<<<<<<<<
 * 
 *   def findNear(self,query, *args, **xargs):
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->findNear(__pyx_v_query->data, __pyx_v_limit, __pyx_v_sampleRate, __pyx_v_scaleFactor)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
    }
    __pyx_L8:;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysash.GenericSash._findNear");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":529
 *          return self.sashinstance.findNear_full(query.data,limit,sampleRate, scaleFactor)
 * 
 *   def findNear(self,query, *args, **xargs):             # <<<<<<<<<<<<<<
 *     """ Find a set of approximate nearest neighbours for the specified
 *         query item.
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_findNear(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_findNear[] = " Find a set of approximate nearest neighbours for the specified\n        query item.\n        The number of elements actually found is returned.\n       A \"sampleRate\" of zero indicates a search relative to the entire set.\n        The method also may  use a parameter (\"scaleFactor\")\n          that influences the trade-off between time and accuracy.\n        The default value of this parameter is 1.0 - increasing the value\n          will increase running time (roughly proportionally) and increase\n          the accuracy of the result.\n    ";
static PyObject *__pyx_pf_6pysash_11GenericSash_findNear(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_query = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_xargs = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_query,0};
  __Pyx_SetupRefcountContext("findNear");
  __pyx_v_xargs = PyDict_New(); if (unlikely(!__pyx_v_xargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_xargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args)); __Pyx_GOTREF(__pyx_v_args);

    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_xargs);
      return NULL;
    }
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      default:
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_kp_query);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      const Py_ssize_t used_pos_args = (PyTuple_GET_SIZE(__pyx_args) < 1) ? PyTuple_GET_SIZE(__pyx_args) : 1;
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_xargs, values, used_pos_args, "findNear") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_query = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_query = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("findNear", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_AddTraceback("pysash.GenericSash.findNear");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":540
 *           the accuracy of the result.
 *     """
 *     return self._findNear(SashInputVecPython(query,self.distance), *args, **xargs )             # <<<<<<<<<<<<<<
 * 
 *   def getMaxParents (self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp__findNear); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_query);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_query);
  __Pyx_GIVEREF(__pyx_v_query);
  __Pyx_INCREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  __Pyx_GIVEREF(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->distance);
  __pyx_t_3 = PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6pysash_SashInputVecPython)), ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_1 = PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_t_2), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(__pyx_t_1, __pyx_t_3, __pyx_v_xargs); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.GenericSash.findNear");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_xargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":542
 *     return self._findNear(SashInputVecPython(query,self.distance), *args, **xargs )
 * 
 *   def getMaxParents (self):             # <<<<<<<<<<<<<<
 *     """ Returns the upper limit on the number of parents per SASH node."""
 *     return self.sashinstance.getMaxParents()
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_getMaxParents(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_getMaxParents[] = " Returns the upper limit on the number of parents per SASH node.";
static PyObject *__pyx_pf_6pysash_11GenericSash_getMaxParents(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getMaxParents");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":544
 *   def getMaxParents (self):
 *     """ Returns the upper limit on the number of parents per SASH node."""
 *     return self.sashinstance.getMaxParents()             # <<<<<<<<<<<<<<
 * 
 *   def getNumItems (self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->getMaxParents()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.GenericSash.getMaxParents");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":546
 *     return self.sashinstance.getMaxParents()
 * 
 *   def getNumItems (self):             # <<<<<<<<<<<<<<
 *     """  Returns the number of data items of the SASH. """
 *     return self.sashinstance.getNumItems()
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_getNumItems(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_getNumItems[] = "  Returns the number of data items of the SASH. ";
static PyObject *__pyx_pf_6pysash_11GenericSash_getNumItems(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getNumItems");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":548
 *   def getNumItems (self):
 *     """  Returns the number of data items of the SASH. """
 *     return self.sashinstance.getNumItems()             # <<<<<<<<<<<<<<
 * 
 *   def getNumLevels (self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->getNumItems()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.GenericSash.getNumItems");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":550
 *     return self.sashinstance.getNumItems()
 * 
 *   def getNumLevels (self):             # <<<<<<<<<<<<<<
 *     """  Returns the number of levels of the SASH. """
 *     return self.sashinstance.getNumLevels()
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_getNumLevels(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_getNumLevels[] = "  Returns the number of levels of the SASH. ";
static PyObject *__pyx_pf_6pysash_11GenericSash_getNumLevels(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getNumLevels");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":552
 *   def getNumLevels (self):
 *     """  Returns the number of levels of the SASH. """
 *     return self.sashinstance.getNumLevels()             # <<<<<<<<<<<<<<
 * 
 *   def getNumOrphans (self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->getNumLevels()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.GenericSash.getNumLevels");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":554
 *     return self.sashinstance.getNumLevels()
 * 
 *   def getNumOrphans (self):             # <<<<<<<<<<<<<<
 *     """Returns the number of orphan nodes encountered during SASH construction. """
 *     return self.sashinstance.getNumOrphans()
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_getNumOrphans(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_getNumOrphans[] = "Returns the number of orphan nodes encountered during SASH construction. ";
static PyObject *__pyx_pf_6pysash_11GenericSash_getNumOrphans(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getNumOrphans");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":556
 *   def getNumOrphans (self):
 *     """Returns the number of orphan nodes encountered during SASH construction. """
 *     return self.sashinstance.getNumOrphans()             # <<<<<<<<<<<<<<
 * 
 *   def getResultAcc (self,int howMany=1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->getNumOrphans()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.GenericSash.getNumOrphans");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":558
 *     return self.sashinstance.getNumOrphans()
 * 
 *   def getResultAcc (self,int howMany=1):             # <<<<<<<<<<<<<<
 *     """
 *     Computes the recall accuracy of the most recent query result.
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_getResultAcc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_getResultAcc[] = "\n    Computes the recall accuracy of the most recent query result.\n    A list of the exact distances must be provided, sorted\n      from smallest to largest.\n    The number of exact distances provided determines the size\n      of the neighbourhood within which the accuracy is assessed.\n    The list must contain at least as many entries as the number of\n      items found in the query result.\n    If unsuccessful, a negative value is returned.\n    ";
static PyObject *__pyx_pf_6pysash_11GenericSash_getResultAcc(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_howMany;
  PyObject *__pyx_v_r;
  PyObject *__pyx_v_rf;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_2 = 0;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_howMany,0};
  __Pyx_SetupRefcountContext("getResultAcc");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_howMany);
        if (unlikely(value)) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getResultAcc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_howMany = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_howMany == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_howMany = 1;
    }
  } else {
    __pyx_v_howMany = 1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_howMany = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_howMany == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getResultAcc", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 558; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.GenericSash.getResultAcc");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_rf = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":569
 *     If unsuccessful, a negative value is returned.
 *     """
 *     r=numpy.ndarray(shape=(howMany,),dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     rf=self.sashinstance.getResultAcc (<float *> PyArray_DATA(r), howMany)
 *     return r,rf
 */
  __pyx_1 = PyDict_New(); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_1 = PyInt_FromLong(__pyx_v_howMany); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_1, __pyx_kp_shape, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_2 = __Pyx_GetName(__pyx_m, __pyx_kp_numpy); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_2);
  __pyx_t_2 = PyObject_GetAttr(__pyx_2, __pyx_kp_31); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
  if (PyDict_SetItem(__pyx_1, __pyx_kp_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(((PyObject *)((PyObject*)__pyx_ptype_5numpy_ndarray)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __Pyx_DECREF(__pyx_v_r);
  __pyx_v_r = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":570
 *     """
 *     r=numpy.ndarray(shape=(howMany,),dtype=numpy.float32)
 *     rf=self.sashinstance.getResultAcc (<float *> PyArray_DATA(r), howMany)             # <<<<<<<<<<<<<<
 *     return r,rf
 * 
 */
  if (!(__Pyx_TypeTest(__pyx_v_r, __pyx_ptype_5numpy_ndarray))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyFloat_FromDouble(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->getResultAcc(((float *)PyArray_DATA(((PyArrayObject *)__pyx_v_r))), __pyx_v_howMany)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_v_rf);
  __pyx_v_rf = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":571
 *     r=numpy.ndarray(shape=(howMany,),dtype=numpy.float32)
 *     rf=self.sashinstance.getResultAcc (<float *> PyArray_DATA(r), howMany)
 *     return r,rf             # <<<<<<<<<<<<<<
 * 
 *   def getResultDists (self,int maxresults=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_INCREF(__pyx_v_r);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_r);
  __Pyx_GIVEREF(__pyx_v_r);
  __Pyx_INCREF(__pyx_v_rf);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_rf);
  __Pyx_GIVEREF(__pyx_v_rf);
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_2);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysash.GenericSash.getResultAcc");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_r);
  __Pyx_DECREF(__pyx_v_rf);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":573
 *     return r,rf
 * 
 *   def getResultDists (self,int maxresults=-1):             # <<<<<<<<<<<<<<
 *     """
 *       returns q list filled with the query-to-neighbour
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_getResultDists(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_getResultDists[] = "\n      returns q list filled with the query-to-neighbour\n      distances found in the most recent SASH query.\n      If successful, the number of items found is returned.\n      If unsuccessful, zero is returned.\n    ";
static PyObject *__pyx_pf_6pysash_11GenericSash_getResultDists(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_maxresults;
  PyObject *__pyx_v_r;
  PyObject *__pyx_v_ri;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_2 = 0;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_maxresults,0};
  __Pyx_SetupRefcountContext("getResultDists");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_maxresults);
        if (unlikely(value)) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getResultDists") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_maxresults = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_maxresults == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_maxresults = -1;
    }
  } else {
    __pyx_v_maxresults = -1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_maxresults = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_maxresults == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getResultDists", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.GenericSash.getResultDists");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_ri = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":580
 *       If unsuccessful, zero is returned.
 *     """
 *     if maxresults==-1:             # <<<<<<<<<<<<<<
 *       maxresults=self.getResultNumFound()
 *       if (maxresults==0):
 */
  __pyx_t_1 = (__pyx_v_maxresults == -1);
  if (__pyx_t_1) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":581
 *     """
 *     if maxresults==-1:
 *       maxresults=self.getResultNumFound()             # <<<<<<<<<<<<<<
 *       if (maxresults==0):
 *          return []
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_getResultNumFound); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_maxresults = __pyx_t_4;

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":582
 *     if maxresults==-1:
 *       maxresults=self.getResultNumFound()
 *       if (maxresults==0):             # <<<<<<<<<<<<<<
 *          return []
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.float32)
 */
    __pyx_t_1 = (__pyx_v_maxresults == 0);
    if (__pyx_t_1) {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":583
 *       maxresults=self.getResultNumFound()
 *       if (maxresults==0):
 *          return []             # <<<<<<<<<<<<<<
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.float32)
 *     ri=self.sashinstance.getResultDists (<float *> PyArray_DATA(r), maxresults)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __pyx_r = ((PyObject *)__pyx_t_3);
      __pyx_t_3 = 0;
      goto __pyx_L0;
      goto __pyx_L7;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":584
 *       if (maxresults==0):
 *          return []
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.float32)             # <<<<<<<<<<<<<<
 *     ri=self.sashinstance.getResultDists (<float *> PyArray_DATA(r), maxresults)
 *     return r[:ri]
 */
  __pyx_1 = PyDict_New(); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_3 = PyInt_FromLong(__pyx_v_maxresults); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_1, __pyx_kp_shape, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_2 = __Pyx_GetName(__pyx_m, __pyx_kp_numpy); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_2);
  __pyx_t_2 = PyObject_GetAttr(__pyx_2, __pyx_kp_31); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
  if (PyDict_SetItem(__pyx_1, __pyx_kp_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(((PyObject *)((PyObject*)__pyx_ptype_5numpy_ndarray)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __Pyx_DECREF(__pyx_v_r);
  __pyx_v_r = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":585
 *          return []
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.float32)
 *     ri=self.sashinstance.getResultDists (<float *> PyArray_DATA(r), maxresults)             # <<<<<<<<<<<<<<
 *     return r[:ri]
 * 
 */
  if (!(__Pyx_TypeTest(__pyx_v_r, __pyx_ptype_5numpy_ndarray))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->getResultDists(((float *)PyArray_DATA(((PyArrayObject *)__pyx_v_r))), __pyx_v_maxresults)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_v_ri);
  __pyx_v_ri = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":586
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.float32)
 *     ri=self.sashinstance.getResultDists (<float *> PyArray_DATA(r), maxresults)
 *     return r[:ri]             # <<<<<<<<<<<<<<
 * 
 *   def getResultDistComps(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ri); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_2 = PySequence_GetSlice(__pyx_v_r, 0, __pyx_t_5); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_2);
  __pyx_r = __pyx_2;
  __pyx_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_2);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.GenericSash.getResultDists");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_r);
  __Pyx_DECREF(__pyx_v_ri);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":588
 *     return r[:ri]
 * 
 *   def getResultDistComps(self):             # <<<<<<<<<<<<<<
 *     """
 *      Returns the number of distance computations performed during
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_getResultDistComps(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_getResultDistComps[] = "\n     Returns the number of distance computations performed during\n       the most recent SASH operation.\n    ";
static PyObject *__pyx_pf_6pysash_11GenericSash_getResultDistComps(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getResultDistComps");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":593
 *        the most recent SASH operation.
 *     """
 *     return self.sashinstance.getResultDistComps ()             # <<<<<<<<<<<<<<
 * 
 *   def getResultIndices(self, int maxresults=-1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->getResultDistComps()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.GenericSash.getResultDistComps");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":595
 *     return self.sashinstance.getResultDistComps ()
 * 
 *   def getResultIndices(self, int maxresults=-1):             # <<<<<<<<<<<<<<
 *     """
 *        returns a list with the (external) indices of the
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_getResultIndices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_getResultIndices[] = "\n       returns a list with the (external) indices of the\n       items found in the most recent SASH query.\n       If successful, the number of items found is returned.\n       If unsuccessful, zero is returned.\n    ";
static PyObject *__pyx_pf_6pysash_11GenericSash_getResultIndices(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_maxresults;
  PyObject *__pyx_v_r;
  PyObject *__pyx_v_ri;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_2 = 0;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  static PyObject **__pyx_pyargnames[] = {&__pyx_kp_maxresults,0};
  __Pyx_SetupRefcountContext("getResultIndices");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_kp_maxresults);
        if (unlikely(value)) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "getResultIndices") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_maxresults = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_maxresults == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_maxresults = -1;
    }
  } else {
    __pyx_v_maxresults = -1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_maxresults = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_maxresults == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getResultIndices", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 595; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysash.GenericSash.getResultIndices");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_ri = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":602
 *        If unsuccessful, zero is returned.
 *     """
 *     if maxresults==-1:             # <<<<<<<<<<<<<<
 *      maxresults=self.getResultNumFound()
 *      if (maxresults==0):
 */
  __pyx_t_1 = (__pyx_v_maxresults == -1);
  if (__pyx_t_1) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":603
 *     """
 *     if maxresults==-1:
 *      maxresults=self.getResultNumFound()             # <<<<<<<<<<<<<<
 *      if (maxresults==0):
 *         return []
 */
    __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_getResultNumFound); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = __Pyx_PyInt_AsInt(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_maxresults = __pyx_t_4;

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":604
 *     if maxresults==-1:
 *      maxresults=self.getResultNumFound()
 *      if (maxresults==0):             # <<<<<<<<<<<<<<
 *         return []
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.uint32)
 */
    __pyx_t_1 = (__pyx_v_maxresults == 0);
    if (__pyx_t_1) {

      /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":605
 *      maxresults=self.getResultNumFound()
 *      if (maxresults==0):
 *         return []             # <<<<<<<<<<<<<<
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.uint32)
 *     ri=self.sashinstance.getResultIndices (<int *> PyArray_DATA(r), maxresults)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 605; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      __pyx_r = ((PyObject *)__pyx_t_3);
      __pyx_t_3 = 0;
      goto __pyx_L0;
      goto __pyx_L7;
    }
    __pyx_L7:;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":606
 *      if (maxresults==0):
 *         return []
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.uint32)             # <<<<<<<<<<<<<<
 *     ri=self.sashinstance.getResultIndices (<int *> PyArray_DATA(r), maxresults)
 *     return r[:ri]
 */
  __pyx_1 = PyDict_New(); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_1));
  __pyx_t_3 = PyInt_FromLong(__pyx_v_maxresults); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_1, __pyx_kp_shape, ((PyObject *)__pyx_t_2)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_2 = __Pyx_GetName(__pyx_m, __pyx_kp_numpy); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_2);
  __pyx_t_2 = PyObject_GetAttr(__pyx_2, __pyx_kp_32); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_2); __pyx_2 = 0;
  if (PyDict_SetItem(__pyx_1, __pyx_kp_dtype, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(((PyObject *)((PyObject*)__pyx_ptype_5numpy_ndarray)), ((PyObject *)__pyx_empty_tuple), ((PyObject *)__pyx_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  __Pyx_DECREF(__pyx_v_r);
  __pyx_v_r = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":607
 *         return []
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.uint32)
 *     ri=self.sashinstance.getResultIndices (<int *> PyArray_DATA(r), maxresults)             # <<<<<<<<<<<<<<
 *     return r[:ri]
 * 
 */
  if (!(__Pyx_TypeTest(__pyx_v_r, __pyx_ptype_5numpy_ndarray))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->getResultIndices(((int *)PyArray_DATA(((PyArrayObject *)__pyx_v_r))), __pyx_v_maxresults)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 607; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_v_ri);
  __pyx_v_ri = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":608
 *     r=numpy.ndarray(shape=(maxresults,),dtype=numpy.uint32)
 *     ri=self.sashinstance.getResultIndices (<int *> PyArray_DATA(r), maxresults)
 *     return r[:ri]             # <<<<<<<<<<<<<<
 * 
 *   def getResultNumFound(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_ri); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_2 = PySequence_GetSlice(__pyx_v_r, 0, __pyx_t_5); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 608; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_2);
  __pyx_r = __pyx_2;
  __pyx_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_2);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysash.GenericSash.getResultIndices");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_r);
  __Pyx_DECREF(__pyx_v_ri);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":610
 *     return r[:ri]
 * 
 *   def getResultNumFound(self):             # <<<<<<<<<<<<<<
 *     """
 *      Returns the number of items found in the most recent query.
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_getResultNumFound(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_getResultNumFound[] = "\n     Returns the number of items found in the most recent query.\n    ";
static PyObject *__pyx_pf_6pysash_11GenericSash_getResultNumFound(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getResultNumFound");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":614
 *      Returns the number of items found in the most recent query.
 *     """
 *     return self.sashinstance.getResultNumFound ()             # <<<<<<<<<<<<<<
 * 
 *   def getResultSampleSize (self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->getResultNumFound()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.GenericSash.getResultNumFound");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":616
 *     return self.sashinstance.getResultNumFound ()
 * 
 *   def getResultSampleSize (self):             # <<<<<<<<<<<<<<
 *     """
 *     Returns the sample size used in the most recent query.
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_getResultSampleSize(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_getResultSampleSize[] = "\n    Returns the sample size used in the most recent query.\n    ";
static PyObject *__pyx_pf_6pysash_11GenericSash_getResultSampleSize(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getResultSampleSize");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":620
 *     Returns the sample size used in the most recent query.
 *     """
 *     return self.sashinstance.getResultSampleSize()             # <<<<<<<<<<<<<<
 * 
 *   def getRNGSeed(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->getResultSampleSize()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.GenericSash.getResultSampleSize");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":622
 *     return self.sashinstance.getResultSampleSize()
 * 
 *   def getRNGSeed(self):             # <<<<<<<<<<<<<<
 *     """
 *      Returns the seed value used for random number generator initialization.
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_getRNGSeed(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_getRNGSeed[] = "\n     Returns the seed value used for random number generator initialization.\n    ";
static PyObject *__pyx_pf_6pysash_11GenericSash_getRNGSeed(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_SetupRefcountContext("getRNGSeed");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":626
 *      Returns the seed value used for random number generator initialization.
 *     """
 *     return self.sashinstance.getRNGSeed ()             # <<<<<<<<<<<<<<
 * 
 *   def resetQuery(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->getRNGSeed()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysash.GenericSash.getRNGSeed");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":628
 *     return self.sashinstance.getRNGSeed ()
 * 
 *   def resetQuery(self):             # <<<<<<<<<<<<<<
 *      """
 *        Resets the current query object to NULL.
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_resetQuery(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_resetQuery[] = "\n       Resets the current query object to NULL.\n       This has the effect of clearing any saved distances - subsequent\n       findNear and findNearest operations would be forced to compute\n       all needed distances from scratch.\n     ";
static PyObject *__pyx_pf_6pysash_11GenericSash_resetQuery(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_SetupRefcountContext("resetQuery");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":635
 *        all needed distances from scratch.
 *      """
 *      self.sashinstance.resetQuery ()             # <<<<<<<<<<<<<<
 * 
 *   def save(self,filename):
 */
  ((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->resetQuery();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":637
 *      self.sashinstance.resetQuery ()
 * 
 *   def save(self,filename):             # <<<<<<<<<<<<<<
 *     """
 *      Save the SASH to the specified file.
 */

static PyObject *__pyx_pf_6pysash_11GenericSash_save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_6pysash_11GenericSash_save[] = "\n     Save the SASH to the specified file.\n     The extension \".sash\" is automatically appended to the file name.\n     If successful, the number of SASH items is returned.\n     If unsuccessful, zero is returned.\n    ";
static PyObject *__pyx_pf_6pysash_11GenericSash_save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  int __pyx_t_2;
  __Pyx_SetupRefcountContext("save");

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":644
 *      If unsuccessful, zero is returned.
 *     """
 *     if (not self.sashinstance.saveToFile(filename)):             # <<<<<<<<<<<<<<
 *       raise IOError, "unable to save sash"
 */
  __pyx_t_1 = __Pyx_PyBytes_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = (!((struct __pyx_obj_6pysash_GenericSash *)__pyx_v_self)->__pyx_base.sashinstance->saveToFile(__pyx_t_1));
  if (__pyx_t_2) {

    /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":645
 *     """
 *     if (not self.sashinstance.saveToFile(filename)):
 *       raise IOError, "unable to save sash"             # <<<<<<<<<<<<<<
 */
    __Pyx_Raise(__pyx_builtin_IOError, __pyx_kp_34, 0);
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysash.GenericSash.save");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":65
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  char *__pyx_t_7;
  __Pyx_SetupRefcountContext("__getbuffer__");
  if (__pyx_v_info == NULL) return 0;
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":71
 *             # of flags
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":72
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":74
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(((PyArrayObject *)__pyx_v_self));

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":76
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = ((sizeof(npy_intp)) != (sizeof(Py_ssize_t)));
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":77
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":79
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L5:;

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":81
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError("ndarray is not C contiguous")
 */
  if (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS)) {

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":82
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError("ndarray is not C contiguous")
 * 
 */
    __pyx_t_1 = (!PyArray_CHKFLAGS(((PyArrayObject *)__pyx_v_self), NPY_C_CONTIGUOUS));
  } else {
    __pyx_t_1 = ((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS);
  }
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":83
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError("ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __Pyx_INCREF(__pyx_kp_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_1);
    __Pyx_GIVEREF(__pyx_kp_1);
    __pyx_t_3 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":85
 *                 raise ValueError("ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError("ndarray is not Fortran contiguous")
 */
  if (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS)) {

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":86
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError("ndarray is not Fortran contiguous")
 * 
 */
    __pyx_t_1 = (!PyArray_CHKFLAGS(((PyArrayObject *)__pyx_v_self), NPY_F_CONTIGUOUS));
  } else {
    __pyx_t_1 = ((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS);
  }
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":87
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError("ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(__pyx_kp_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_2);
    __Pyx_GIVEREF(__pyx_kp_2);
    __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L7;
  }
  __pyx_L7:;

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":89
 *                 raise ValueError("ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(((PyArrayObject *)__pyx_v_self));

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":90
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info. This is allocated
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":91
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info. This is allocated
 *                 # as one block, strides first.
 */
  __pyx_t_4 = __pyx_v_copy_shape;
  if (__pyx_t_4) {

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":94
 *                 # Allocate new buffer for strides and shape info. This is allocated
 *                 # as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * __pyx_v_ndim) * 2)));

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":95
 *                 # as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":96
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_v_ndim; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":97
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(((PyArrayObject *)__pyx_v_self))[__pyx_v_i]);

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":98
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(((PyArrayObject *)__pyx_v_self))[__pyx_v_i]);
    }
    goto __pyx_L8;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":100
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(((PyArrayObject *)__pyx_v_self)));

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":101
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(((PyArrayObject *)__pyx_v_self)));
  }
  __pyx_L8:;

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":102
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":103
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(((PyArrayObject *)__pyx_v_self));

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":104
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!PyArray_ISWRITEABLE(((PyArrayObject *)__pyx_v_self)));

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":107
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":108
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __Pyx_INCREF(((PyObject *)((PyArrayObject *)__pyx_v_self)->descr));
  __pyx_v_descr = ((PyArrayObject *)__pyx_v_self)->descr;

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":112
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":114
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  if ((!__pyx_v_hasfields)) {
    __pyx_t_1 = (!__pyx_v_copy_shape);
  } else {
    __pyx_t_1 = (!__pyx_v_hasfields);
  }
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":116
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L11;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":119
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(__pyx_v_self);
    __Pyx_GIVEREF(__pyx_v_self);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = __pyx_v_self;
  }
  __pyx_L11:;

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":121
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == '>' and little_endian) or
 */
  __pyx_t_1 = (!__pyx_v_hasfields);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":122
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == '>' and little_endian) or
 *                     (descr.byteorder == '<' and not little_endian)):
 */
    __pyx_v_t = __pyx_v_descr->type_num;

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":123
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == '>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == '<' and not little_endian)):
 *                     raise ValueError("Non-native byte order not supported")
 */
    if ((__pyx_v_descr->byteorder == '>')) {
      __pyx_t_1 = __pyx_v_little_endian;
    } else {
      __pyx_t_1 = (__pyx_v_descr->byteorder == '>');
    }
    if (!__pyx_t_1) {

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":124
 *                 t = descr.type_num
 *                 if ((descr.byteorder == '>' and little_endian) or
 *                     (descr.byteorder == '<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError("Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
      if ((__pyx_v_descr->byteorder == '<')) {
        __pyx_t_5 = (!__pyx_v_little_endian);
      } else {
        __pyx_t_5 = (__pyx_v_descr->byteorder == '<');
      }
      __pyx_t_6 = __pyx_t_5;
    } else {
      __pyx_t_6 = __pyx_t_1;
    }
    if (__pyx_t_6) {

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":125
 *                 if ((descr.byteorder == '>' and little_endian) or
 *                     (descr.byteorder == '<' and not little_endian)):
 *                     raise ValueError("Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(__pyx_kp_5);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_5);
      __Pyx_GIVEREF(__pyx_kp_5);
      __pyx_t_3 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_2), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L13;
    }
    __pyx_L13:;

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":126
 *                     (descr.byteorder == '<' and not little_endian)):
 *                     raise ValueError("Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_6;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":127
 *                     raise ValueError("Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_7;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":128
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_8;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":129
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_9;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":130
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_10;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":131
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_11;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":132
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_12;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":133
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_13;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":134
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_14;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":135
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_15;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":136
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_16;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":137
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_17;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":138
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_18;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":139
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_19;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":140
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_20;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":141
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_21;
      break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":142
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError("unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_22;
      break;
      default:

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":144
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError("unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = PyInt_FromLong(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyNumber_Remainder(__pyx_kp_23, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_3));
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":145
 *                 else:
 *                     raise ValueError("unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":146
 *                     raise ValueError("unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L12;
  }
  /*else*/ {

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":148
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = '^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":149
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = '^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":150
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = '^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":153
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)             # <<<<<<<<<<<<<<
 *                 f[0] = 0 # Terminate format string
 * 
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_7;

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":154
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = 0 # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = 0;
  }
  __pyx_L12:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__");
  __pyx_r = -1;
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

/* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":156
 *                 f[0] = 0 # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

static void __pyx_pf_5numpy_7ndarray___releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static void __pyx_pf_5numpy_7ndarray___releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_SetupRefcountContext("__releasebuffer__");

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":157
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = PyArray_HASFIELDS(((PyArrayObject *)__pyx_v_self));
  if (__pyx_t_1) {

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":158
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":159
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_2 = ((sizeof(npy_intp)) != (sizeof(Py_ssize_t)));
  if (__pyx_t_2) {

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":160
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L6;
  }
  __pyx_L6:;

  __Pyx_FinishRefcountContext();
}

/* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":277
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child;
  PyObject *__pyx_v_i;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_new_offset;
  PyObject *__pyx_v_t;
  char *__pyx_r;
  PyObject *__pyx_1 = 0;
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_SetupRefcountContext("_util_dtypestring");
  __pyx_v_child = ((PyArray_Descr *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_i = ((PyObject *)Py_None); __Pyx_INCREF(Py_None);
  __pyx_v_new_offset = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_t = Py_None; __Pyx_INCREF(Py_None);

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":284
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":285
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *     for i in descr.fields.itervalues():
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":287
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *     for i in descr.fields.itervalues():             # <<<<<<<<<<<<<<
 *         child = i[0]
 *         new_offset = i[1]
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_descr->fields, __pyx_kp_itervalues); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_1 = 0; __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2);
  } else {
    __pyx_t_1 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(PyList_CheckExact(__pyx_t_2))) {
      if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++;
    } else if (likely(PyTuple_CheckExact(__pyx_t_2))) {
      if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++;
    } else {
      __pyx_t_3 = PyIter_Next(__pyx_t_2);
      if (!__pyx_t_3) {
        if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (!(likely(PyTuple_CheckExact(__pyx_t_3)) || (__pyx_t_3) == Py_None || (PyErr_Format(PyExc_TypeError, "Expected tuple, got %s", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_v_i));
    __pyx_v_i = ((PyObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":288
 * 
 *     for i in descr.fields.itervalues():
 *         child = i[0]             # <<<<<<<<<<<<<<
 *         new_offset = i[1]
 * 
 */
    __pyx_1 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_i), 0, sizeof(long), PyInt_FromLong); if (!__pyx_1) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_1);
    if (!(__Pyx_TypeTest(__pyx_1, __pyx_ptype_5numpy_dtype))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_v_child));
    __pyx_v_child = ((PyArray_Descr *)__pyx_1);
    __pyx_1 = 0;

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":289
 *     for i in descr.fields.itervalues():
 *         child = i[0]
 *         new_offset = i[1]             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 */
    __pyx_1 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_i), 1, sizeof(long), PyInt_FromLong); if (!__pyx_1) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_1);
    __Pyx_DECREF(__pyx_v_new_offset);
    __pyx_v_new_offset = __pyx_1;
    __pyx_1 = 0;

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":291
 *         new_offset = i[1]
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_3 = PyInt_FromLong((__pyx_v_end - __pyx_v_f)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_int_15, Py_LT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":292
 * 
 *         if (end - f) - (new_offset - offset[0]) < 15:
 *             raise RuntimeError("Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == '>' and little_endian) or
 */
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_5));
      __Pyx_INCREF(__pyx_kp_25);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_25);
      __Pyx_GIVEREF(__pyx_kp_25);
      __pyx_t_4 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L5;
    }
    __pyx_L5:;

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":294
 *             raise RuntimeError("Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == '>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == '<' and not little_endian)):
 *             raise ValueError("Non-native byte order not supported")
 */
    if ((__pyx_v_child->byteorder == '>')) {
      __pyx_t_6 = __pyx_v_little_endian;
    } else {
      __pyx_t_6 = (__pyx_v_child->byteorder == '>');
    }
    if (!__pyx_t_6) {

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":295
 * 
 *         if ((child.byteorder == '>' and little_endian) or
 *             (child.byteorder == '<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError("Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
      if ((__pyx_v_child->byteorder == '<')) {
        __pyx_t_7 = (!__pyx_v_little_endian);
      } else {
        __pyx_t_7 = (__pyx_v_child->byteorder == '<');
      }
      __pyx_t_8 = __pyx_t_7;
    } else {
      __pyx_t_8 = __pyx_t_6;
    }
    if (__pyx_t_8) {

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":296
 *         if ((child.byteorder == '>' and little_endian) or
 *             (child.byteorder == '<' and not little_endian)):
 *             raise ValueError("Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_4));
      __Pyx_INCREF(__pyx_kp_28);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_28);
      __Pyx_GIVEREF(__pyx_kp_28);
      __pyx_t_5 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L6;
    }
    __pyx_L6:;

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":306
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_5 = PyInt_FromLong((__pyx_v_offset[0])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_v_new_offset, Py_LT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_8) break;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":307
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":308
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f += 1;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":309
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      (__pyx_v_offset[0]) += 1;
    }

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":311
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    (__pyx_v_offset[0]) += __pyx_v_child->elsize;

    /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":313
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_8 = (!PyDataType_HASFIELDS(__pyx_v_child));
    if (__pyx_t_8) {

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":314
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError("Format string allocated too short.")
 */
      __pyx_t_4 = PyInt_FromLong(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_v_t);
      __pyx_v_t = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":315
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError("Format string allocated too short.")
 * 
 */
      __pyx_t_8 = ((__pyx_v_end - __pyx_v_f) < 5);
      if (__pyx_t_8) {

        /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":316
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError("Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_4));
        __Pyx_INCREF(__pyx_kp_29);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_29);
        __Pyx_GIVEREF(__pyx_kp_29);
        __pyx_t_5 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L10;
      }
      __pyx_L10:;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":319
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":320
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":321
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":322
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":323
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":324
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":325
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":326
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":327
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":328
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":329
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":330
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_4 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":331
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_5 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":332
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_4 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f += 1;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":333
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_5 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f += 1;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":334
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_4 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f += 1;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":335
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_5 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_5, Py_EQ); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_8) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L11;
      }
      /*else*/ {

        /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":337
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError("unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_4 = PyNumber_Remainder(__pyx_kp_30, __pyx_v_t); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_5));
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L11:;

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":338
 *             else:
 *                 raise ValueError("unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f += 1;
      goto __pyx_L9;
    }
    /*else*/ {

      /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":342
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L9:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/numpy.pxd":343
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("numpy._util_dtypestring");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_child);
  __Pyx_DECREF(__pyx_v_i);
  __Pyx_DECREF(__pyx_v_new_offset);
  __Pyx_DECREF(__pyx_v_t);
  __Pyx_FinishRefcountContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6pysash_SashInputVec(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_6pysash_SashInputVec(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static struct PyMethodDef __pyx_methods_6pysash_SashInputVec[] = {
  {__Pyx_NAMESTR("__del__"), (PyCFunction)__pyx_pf_6pysash_12SashInputVec___del__, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SashInputVec = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SashInputVec = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SashInputVec = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SashInputVec = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_6pysash_SashInputVec = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pysash.SashInputVec"), /*tp_name*/
  sizeof(struct __pyx_obj_6pysash_SashInputVec), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pysash_SashInputVec, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_SashInputVec, /*tp_as_number*/
  &__pyx_tp_as_sequence_SashInputVec, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SashInputVec, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SashInputVec, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pysash_SashInputVec, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6pysash_12SashInputVec___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pysash_SashInputVec, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static PyObject *__pyx_tp_new_6pysash_SashInputArray(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_6pysash_SashInputArray(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static struct PyMethodDef __pyx_methods_6pysash_SashInputArray[] = {
  {__Pyx_NAMESTR("__del__"), (PyCFunction)__pyx_pf_6pysash_14SashInputArray___del__, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SashInputArray = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SashInputArray = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SashInputArray = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SashInputArray = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_6pysash_SashInputArray = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pysash.SashInputArray"), /*tp_name*/
  sizeof(struct __pyx_obj_6pysash_SashInputArray), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pysash_SashInputArray, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_SashInputArray, /*tp_as_number*/
  &__pyx_tp_as_sequence_SashInputArray, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SashInputArray, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SashInputArray, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pysash_SashInputArray, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6pysash_14SashInputArray___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pysash_SashInputArray, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static PyObject *__pyx_tp_new_6pysash_WContainer(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pysash_WContainer *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_6pysash_WContainer *)o);
  p->value = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6pysash_WContainer(PyObject *o) {
  struct __pyx_obj_6pysash_WContainer *p = (struct __pyx_obj_6pysash_WContainer *)o;
  Py_XDECREF(p->value);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6pysash_WContainer(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pysash_WContainer *p = (struct __pyx_obj_6pysash_WContainer *)o;
  if (p->value) {
    e = (*v)(p->value, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pysash_WContainer(PyObject *o) {
  struct __pyx_obj_6pysash_WContainer *p = (struct __pyx_obj_6pysash_WContainer *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->value);
  p->value = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static struct PyMethodDef __pyx_methods_6pysash_WContainer[] = {
  {__Pyx_NAMESTR("__repr__"), (PyCFunction)__pyx_pf_6pysash_10WContainer___repr__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("__str__"), (PyCFunction)__pyx_pf_6pysash_10WContainer___str__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_WContainer = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_WContainer = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_WContainer = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_WContainer = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_6pysash_WContainer = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pysash.WContainer"), /*tp_name*/
  sizeof(struct __pyx_obj_6pysash_WContainer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pysash_WContainer, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  __pyx_pf_6pysash_10WContainer___repr__, /*tp_repr*/
  &__pyx_tp_as_number_WContainer, /*tp_as_number*/
  &__pyx_tp_as_sequence_WContainer, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_WContainer, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pf_6pysash_10WContainer___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_WContainer, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pysash_WContainer, /*tp_traverse*/
  __pyx_tp_clear_6pysash_WContainer, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pysash_WContainer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6pysash_10WContainer___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pysash_WContainer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static PyObject *__pyx_tp_new_6pysash_SashInputVecPython(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pysash_SashInputVecPython *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_6pysash_SashInputVecPython *)o);
  p->container_obj = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6pysash_SashInputVecPython(PyObject *o) {
  struct __pyx_obj_6pysash_SashInputVecPython *p = (struct __pyx_obj_6pysash_SashInputVecPython *)o;
  Py_XDECREF(p->container_obj);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6pysash_SashInputVecPython(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pysash_SashInputVecPython *p = (struct __pyx_obj_6pysash_SashInputVecPython *)o;
  if (p->container_obj) {
    e = (*v)(p->container_obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pysash_SashInputVecPython(PyObject *o) {
  struct __pyx_obj_6pysash_SashInputVecPython *p = (struct __pyx_obj_6pysash_SashInputVecPython *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->container_obj);
  p->container_obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static struct PyMethodDef __pyx_methods_6pysash_SashInputVecPython[] = {
  {__Pyx_NAMESTR("__del__"), (PyCFunction)__pyx_pf_6pysash_18SashInputVecPython___del__, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SashInputVecPython = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SashInputVecPython = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SashInputVecPython = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SashInputVecPython = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_6pysash_SashInputVecPython = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pysash.SashInputVecPython"), /*tp_name*/
  sizeof(struct __pyx_obj_6pysash_SashInputVecPython), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pysash_SashInputVecPython, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_SashInputVecPython, /*tp_as_number*/
  &__pyx_tp_as_sequence_SashInputVecPython, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SashInputVecPython, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SashInputVecPython, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pysash_SashInputVecPython, /*tp_traverse*/
  __pyx_tp_clear_6pysash_SashInputVecPython, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pysash_SashInputVecPython, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6pysash_18SashInputVecPython___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pysash_SashInputVecPython, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static PyObject *__pyx_tp_new_6pysash_SashInputArrayPython(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pysash_SashInputArrayPython *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_6pysash_SashInputArrayPython *)o);
  p->container_objlist = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6pysash_SashInputArrayPython(PyObject *o) {
  struct __pyx_obj_6pysash_SashInputArrayPython *p = (struct __pyx_obj_6pysash_SashInputArrayPython *)o;
  Py_XDECREF(p->container_objlist);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6pysash_SashInputArrayPython(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pysash_SashInputArrayPython *p = (struct __pyx_obj_6pysash_SashInputArrayPython *)o;
  if (p->container_objlist) {
    e = (*v)(p->container_objlist, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pysash_SashInputArrayPython(PyObject *o) {
  struct __pyx_obj_6pysash_SashInputArrayPython *p = (struct __pyx_obj_6pysash_SashInputArrayPython *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->container_objlist);
  p->container_objlist = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static struct PyMethodDef __pyx_methods_6pysash_SashInputArrayPython[] = {
  {__Pyx_NAMESTR("__del__"), (PyCFunction)__pyx_pf_6pysash_20SashInputArrayPython___del__, METH_O, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SashInputArrayPython = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SashInputArrayPython = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SashInputArrayPython = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SashInputArrayPython = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_6pysash_SashInputArrayPython = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pysash.SashInputArrayPython"), /*tp_name*/
  sizeof(struct __pyx_obj_6pysash_SashInputArrayPython), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pysash_SashInputArrayPython, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_SashInputArrayPython, /*tp_as_number*/
  &__pyx_tp_as_sequence_SashInputArrayPython, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SashInputArrayPython, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SashInputArrayPython, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pysash_SashInputArrayPython, /*tp_traverse*/
  __pyx_tp_clear_6pysash_SashInputArrayPython, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pysash_SashInputArrayPython, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6pysash_20SashInputArrayPython___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pysash_SashInputArrayPython, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static PyObject *__pyx_tp_new_6pysash_Sash(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_6pysash_Sash(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static struct PyMethodDef __pyx_methods_6pysash_Sash[] = {
  {__Pyx_NAMESTR("__del__"), (PyCFunction)__pyx_pf_6pysash_4Sash___del__, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("_build"), (PyCFunction)__pyx_pf_6pysash_4Sash__build, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("build"), (PyCFunction)__pyx_pf_6pysash_4Sash_build, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_build)},
  {__Pyx_NAMESTR("_findAllInBall"), (PyCFunction)__pyx_pf_6pysash_4Sash__findAllInBall, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("findAllInBall"), (PyCFunction)__pyx_pf_6pysash_4Sash_findAllInBall, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("_findMostInBall"), (PyCFunction)__pyx_pf_6pysash_4Sash__findMostInBall, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("findMostInBall"), (PyCFunction)__pyx_pf_6pysash_4Sash_findMostInBall, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_findMostInBall)},
  {__Pyx_NAMESTR("_findNearest"), (PyCFunction)__pyx_pf_6pysash_4Sash__findNearest, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("findNearest"), (PyCFunction)__pyx_pf_6pysash_4Sash_findNearest, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("_findNear"), (PyCFunction)__pyx_pf_6pysash_4Sash__findNear, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("findNear"), (PyCFunction)__pyx_pf_6pysash_4Sash_findNear, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_findNear)},
  {__Pyx_NAMESTR("getMaxParents"), (PyCFunction)__pyx_pf_6pysash_4Sash_getMaxParents, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_getMaxParents)},
  {__Pyx_NAMESTR("getNumItems"), (PyCFunction)__pyx_pf_6pysash_4Sash_getNumItems, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_getNumItems)},
  {__Pyx_NAMESTR("getNumLevels"), (PyCFunction)__pyx_pf_6pysash_4Sash_getNumLevels, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_getNumLevels)},
  {__Pyx_NAMESTR("getNumOrphans"), (PyCFunction)__pyx_pf_6pysash_4Sash_getNumOrphans, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_getNumOrphans)},
  {__Pyx_NAMESTR("getResultAcc"), (PyCFunction)__pyx_pf_6pysash_4Sash_getResultAcc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_getResultAcc)},
  {__Pyx_NAMESTR("getResultDists"), (PyCFunction)__pyx_pf_6pysash_4Sash_getResultDists, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_getResultDists)},
  {__Pyx_NAMESTR("getResultDistComps"), (PyCFunction)__pyx_pf_6pysash_4Sash_getResultDistComps, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_getResultDistComps)},
  {__Pyx_NAMESTR("getResultIndices"), (PyCFunction)__pyx_pf_6pysash_4Sash_getResultIndices, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_getResultIndices)},
  {__Pyx_NAMESTR("getResultNumFound"), (PyCFunction)__pyx_pf_6pysash_4Sash_getResultNumFound, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_getResultNumFound)},
  {__Pyx_NAMESTR("getResultSampleSize"), (PyCFunction)__pyx_pf_6pysash_4Sash_getResultSampleSize, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_getResultSampleSize)},
  {__Pyx_NAMESTR("getRNGSeed"), (PyCFunction)__pyx_pf_6pysash_4Sash_getRNGSeed, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_getRNGSeed)},
  {__Pyx_NAMESTR("resetQuery"), (PyCFunction)__pyx_pf_6pysash_4Sash_resetQuery, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_resetQuery)},
  {__Pyx_NAMESTR("save"), (PyCFunction)__pyx_pf_6pysash_4Sash_save, METH_O, __Pyx_DOCSTR(__pyx_doc_6pysash_4Sash_save)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Sash = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Sash = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Sash = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Sash = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_6pysash_Sash = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pysash.Sash"), /*tp_name*/
  sizeof(struct __pyx_obj_6pysash_Sash), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pysash_Sash, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_Sash, /*tp_as_number*/
  &__pyx_tp_as_sequence_Sash, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Sash, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Sash, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pysash_Sash, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6pysash_4Sash___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pysash_Sash, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static PyObject *__pyx_tp_new_6pysash_GenericSash(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6pysash_GenericSash *p;
  PyObject *o = __pyx_tp_new_6pysash_Sash(t, a, k);
  if (!o) return 0;
  p = ((struct __pyx_obj_6pysash_GenericSash *)o);
  p->distance = Py_None; Py_INCREF(Py_None);
  p->persistent_data = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6pysash_GenericSash(PyObject *o) {
  struct __pyx_obj_6pysash_GenericSash *p = (struct __pyx_obj_6pysash_GenericSash *)o;
  Py_XDECREF(p->distance);
  Py_XDECREF(p->persistent_data);
  __pyx_tp_dealloc_6pysash_Sash(o);
}

static int __pyx_tp_traverse_6pysash_GenericSash(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6pysash_GenericSash *p = (struct __pyx_obj_6pysash_GenericSash *)o;
  if (__pyx_ptype_6pysash_Sash->tp_traverse) {
    e = __pyx_ptype_6pysash_Sash->tp_traverse(o, v, a); if (e) return e;
  }
  if (p->distance) {
    e = (*v)(p->distance, a); if (e) return e;
  }
  if (p->persistent_data) {
    e = (*v)(p->persistent_data, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6pysash_GenericSash(PyObject *o) {
  struct __pyx_obj_6pysash_GenericSash *p = (struct __pyx_obj_6pysash_GenericSash *)o;
  PyObject* tmp;
  if (__pyx_ptype_6pysash_Sash->tp_clear) {
    __pyx_ptype_6pysash_Sash->tp_clear(o);
  }
  tmp = ((PyObject*)p->distance);
  p->distance = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->persistent_data);
  p->persistent_data = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static struct PyMethodDef __pyx_methods_6pysash_GenericSash[] = {
  {__Pyx_NAMESTR("get_persistent_data"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_get_persistent_data, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("_build"), (PyCFunction)__pyx_pf_6pysash_11GenericSash__build, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("build"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_build, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_build)},
  {__Pyx_NAMESTR("_findAllInBall"), (PyCFunction)__pyx_pf_6pysash_11GenericSash__findAllInBall, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("findAllInBall"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_findAllInBall, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("_findMostInBall"), (PyCFunction)__pyx_pf_6pysash_11GenericSash__findMostInBall, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("findMostInBall"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_findMostInBall, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_findMostInBall)},
  {__Pyx_NAMESTR("_findNearest"), (PyCFunction)__pyx_pf_6pysash_11GenericSash__findNearest, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("findNearest"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_findNearest, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("_findNear"), (PyCFunction)__pyx_pf_6pysash_11GenericSash__findNear, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("findNear"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_findNear, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_findNear)},
  {__Pyx_NAMESTR("getMaxParents"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_getMaxParents, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_getMaxParents)},
  {__Pyx_NAMESTR("getNumItems"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_getNumItems, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_getNumItems)},
  {__Pyx_NAMESTR("getNumLevels"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_getNumLevels, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_getNumLevels)},
  {__Pyx_NAMESTR("getNumOrphans"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_getNumOrphans, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_getNumOrphans)},
  {__Pyx_NAMESTR("getResultAcc"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_getResultAcc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_getResultAcc)},
  {__Pyx_NAMESTR("getResultDists"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_getResultDists, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_getResultDists)},
  {__Pyx_NAMESTR("getResultDistComps"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_getResultDistComps, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_getResultDistComps)},
  {__Pyx_NAMESTR("getResultIndices"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_getResultIndices, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_getResultIndices)},
  {__Pyx_NAMESTR("getResultNumFound"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_getResultNumFound, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_getResultNumFound)},
  {__Pyx_NAMESTR("getResultSampleSize"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_getResultSampleSize, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_getResultSampleSize)},
  {__Pyx_NAMESTR("getRNGSeed"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_getRNGSeed, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_getRNGSeed)},
  {__Pyx_NAMESTR("resetQuery"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_resetQuery, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_resetQuery)},
  {__Pyx_NAMESTR("save"), (PyCFunction)__pyx_pf_6pysash_11GenericSash_save, METH_O, __Pyx_DOCSTR(__pyx_doc_6pysash_11GenericSash_save)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_GenericSash = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_GenericSash = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_GenericSash = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_GenericSash = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_6pysash_GenericSash = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("pysash.GenericSash"), /*tp_name*/
  sizeof(struct __pyx_obj_6pysash_GenericSash), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pysash_GenericSash, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_GenericSash, /*tp_as_number*/
  &__pyx_tp_as_sequence_GenericSash, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_GenericSash, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_GenericSash, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6pysash_GenericSash, /*tp_traverse*/
  __pyx_tp_clear_6pysash_GenericSash, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pysash_GenericSash, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_6pysash_11GenericSash___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pysash_GenericSash, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static struct PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

static void __pyx_init_filenames(void); /*proto*/

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("pysash"),
    __Pyx_DOCSTR(__pyx_mdoc), /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp___main__, __pyx_k___main__, sizeof(__pyx_k___main__), 1, 1, 1},
  {&__pyx_kp___init__, __pyx_k___init__, sizeof(__pyx_k___init__), 1, 1, 1},
  {&__pyx_kp___del__, __pyx_k___del__, sizeof(__pyx_k___del__), 1, 1, 1},
  {&__pyx_kp___repr__, __pyx_k___repr__, sizeof(__pyx_k___repr__), 1, 1, 1},
  {&__pyx_kp___str__, __pyx_k___str__, sizeof(__pyx_k___str__), 1, 1, 1},
  {&__pyx_kp__build, __pyx_k__build, sizeof(__pyx_k__build), 1, 1, 1},
  {&__pyx_kp_build, __pyx_k_build, sizeof(__pyx_k_build), 1, 1, 1},
  {&__pyx_kp__findAllInBall, __pyx_k__findAllInBall, sizeof(__pyx_k__findAllInBall), 1, 1, 1},
  {&__pyx_kp_findAllInBall, __pyx_k_findAllInBall, sizeof(__pyx_k_findAllInBall), 1, 1, 1},
  {&__pyx_kp__findMostInBall, __pyx_k__findMostInBall, sizeof(__pyx_k__findMostInBall), 1, 1, 1},
  {&__pyx_kp_findMostInBall, __pyx_k_findMostInBall, sizeof(__pyx_k_findMostInBall), 1, 1, 1},
  {&__pyx_kp__findNearest, __pyx_k__findNearest, sizeof(__pyx_k__findNearest), 1, 1, 1},
  {&__pyx_kp_findNearest, __pyx_k_findNearest, sizeof(__pyx_k_findNearest), 1, 1, 1},
  {&__pyx_kp__findNear, __pyx_k__findNear, sizeof(__pyx_k__findNear), 1, 1, 1},
  {&__pyx_kp_findNear, __pyx_k_findNear, sizeof(__pyx_k_findNear), 1, 1, 1},
  {&__pyx_kp_getMaxParents, __pyx_k_getMaxParents, sizeof(__pyx_k_getMaxParents), 1, 1, 1},
  {&__pyx_kp_getNumItems, __pyx_k_getNumItems, sizeof(__pyx_k_getNumItems), 1, 1, 1},
  {&__pyx_kp_getNumLevels, __pyx_k_getNumLevels, sizeof(__pyx_k_getNumLevels), 1, 1, 1},
  {&__pyx_kp_getNumOrphans, __pyx_k_getNumOrphans, sizeof(__pyx_k_getNumOrphans), 1, 1, 1},
  {&__pyx_kp_getResultAcc, __pyx_k_getResultAcc, sizeof(__pyx_k_getResultAcc), 1, 1, 1},
  {&__pyx_kp_getResultDists, __pyx_k_getResultDists, sizeof(__pyx_k_getResultDists), 1, 1, 1},
  {&__pyx_kp_getResultDistComps, __pyx_k_getResultDistComps, sizeof(__pyx_k_getResultDistComps), 1, 1, 1},
  {&__pyx_kp_getResultIndices, __pyx_k_getResultIndices, sizeof(__pyx_k_getResultIndices), 1, 1, 1},
  {&__pyx_kp_getResultNumFound, __pyx_k_getResultNumFound, sizeof(__pyx_k_getResultNumFound), 1, 1, 1},
  {&__pyx_kp_getResultSampleSize, __pyx_k_getResultSampleSize, sizeof(__pyx_k_getResultSampleSize), 1, 1, 1},
  {&__pyx_kp_getRNGSeed, __pyx_k_getRNGSeed, sizeof(__pyx_k_getRNGSeed), 1, 1, 1},
  {&__pyx_kp_resetQuery, __pyx_k_resetQuery, sizeof(__pyx_k_resetQuery), 1, 1, 1},
  {&__pyx_kp_save, __pyx_k_save, sizeof(__pyx_k_save), 1, 1, 1},
  {&__pyx_kp_get_persistent_data, __pyx_k_get_persistent_data, sizeof(__pyx_k_get_persistent_data), 1, 1, 1},
  {&__pyx_kp_arr, __pyx_k_arr, sizeof(__pyx_k_arr), 1, 1, 1},
  {&__pyx_kp_value, __pyx_k_value, sizeof(__pyx_k_value), 1, 1, 1},
  {&__pyx_kp_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 1, 1, 1},
  {&__pyx_kp_dist, __pyx_k_dist, sizeof(__pyx_k_dist), 1, 1, 1},
  {&__pyx_kp_seed, __pyx_k_seed, sizeof(__pyx_k_seed), 1, 1, 1},
  {&__pyx_kp_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 1, 1, 1},
  {&__pyx_kp_numParents, __pyx_k_numParents, sizeof(__pyx_k_numParents), 1, 1, 1},
  {&__pyx_kp_query, __pyx_k_query, sizeof(__pyx_k_query), 1, 1, 1},
  {&__pyx_kp_radius, __pyx_k_radius, sizeof(__pyx_k_radius), 1, 1, 1},
  {&__pyx_kp_sampleRate, __pyx_k_sampleRate, sizeof(__pyx_k_sampleRate), 1, 1, 1},
  {&__pyx_kp_scaleFactor, __pyx_k_scaleFactor, sizeof(__pyx_k_scaleFactor), 1, 1, 1},
  {&__pyx_kp_limit, __pyx_k_limit, sizeof(__pyx_k_limit), 1, 1, 1},
  {&__pyx_kp_howMany, __pyx_k_howMany, sizeof(__pyx_k_howMany), 1, 1, 1},
  {&__pyx_kp_maxresults, __pyx_k_maxresults, sizeof(__pyx_k_maxresults), 1, 1, 1},
  {&__pyx_kp_distance, __pyx_k_distance, sizeof(__pyx_k_distance), 1, 1, 1},
  {&__pyx_kp_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 1, 1, 1},
  {&__pyx_kp_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 1, 1, 1},
  {&__pyx_kp_31, __pyx_k_31, sizeof(__pyx_k_31), 1, 1, 1},
  {&__pyx_kp_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 1, 1, 1},
  {&__pyx_kp_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 1, 1, 1},
  {&__pyx_kp_range, __pyx_k_range, sizeof(__pyx_k_range), 1, 1, 1},
  {&__pyx_kp_append, __pyx_k_append, sizeof(__pyx_k_append), 1, 1, 1},
  {&__pyx_kp_32, __pyx_k_32, sizeof(__pyx_k_32), 1, 1, 1},
  {&__pyx_kp_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 1, 1, 1},
  {&__pyx_kp_33, __pyx_k_33, sizeof(__pyx_k_33), 0, 0, 0},
  {&__pyx_kp_34, __pyx_k_34, sizeof(__pyx_k_34), 0, 0, 0},
  {&__pyx_kp___getbuffer__, __pyx_k___getbuffer__, sizeof(__pyx_k___getbuffer__), 1, 1, 1},
  {&__pyx_kp___releasebuffer__, __pyx_k___releasebuffer__, sizeof(__pyx_k___releasebuffer__), 1, 1, 1},
  {&__pyx_kp_info, __pyx_k_info, sizeof(__pyx_k_info), 1, 1, 1},
  {&__pyx_kp_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 1, 1, 1},
  {&__pyx_kp_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 1, 1, 1},
  {&__pyx_kp_itervalues, __pyx_k_itervalues, sizeof(__pyx_k_itervalues), 1, 1, 1},
  {&__pyx_kp_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 1, 1, 1},
  {&__pyx_kp_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 0},
  {&__pyx_kp_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 0},
  {&__pyx_kp_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 0},
  {&__pyx_kp_23, __pyx_k_23, sizeof(__pyx_k_23), 0, 0, 0},
  {&__pyx_kp_25, __pyx_k_25, sizeof(__pyx_k_25), 0, 0, 0},
  {&__pyx_kp_28, __pyx_k_28, sizeof(__pyx_k_28), 0, 0, 0},
  {&__pyx_kp_29, __pyx_k_29, sizeof(__pyx_k_29), 0, 0, 0},
  {&__pyx_kp_30, __pyx_k_30, sizeof(__pyx_k_30), 0, 0, 0},
  {0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_kp_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IOError = __Pyx_GetName(__pyx_b, __pyx_kp_IOError); if (!__pyx_builtin_IOError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_kp_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetName(__pyx_b, __pyx_kp_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitGlobals(void) {
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initpysash(void); /*proto*/
PyMODINIT_FUNC initpysash(void)
#else
PyMODINIT_FUNC PyInit_pysash(void); /*proto*/
PyMODINIT_FUNC PyInit_pysash(void)
#endif
{
  PyObject *__pyx_1 = 0;
  #ifdef CYTHON_REFNANNY
  void* __pyx_refchk = NULL;
  __Pyx_Refnanny = __Pyx_ImportRefcountAPI("refnanny");
  if (!__Pyx_Refnanny) {
      PyErr_Clear();
      __Pyx_Refnanny = __Pyx_ImportRefcountAPI("Cython.Runtime.refnanny");
      if (!__Pyx_Refnanny)
          Py_FatalError("failed to import refnanny module");
  }
  __pyx_refchk = __Pyx_Refnanny->NewContext("PyMODINIT_FUNC PyInit_pysash(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Library function declarations ---*/
  __pyx_init_filenames();
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("pysash"), __pyx_methods, __pyx_mdoc, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__pyx_module_is_main_pysash) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_kp___main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_skip_dispatch = 0;
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6pysash_SashInputVec) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SashInputVec", (PyObject *)&__pyx_type_6pysash_SashInputVec) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pysash_SashInputVec = &__pyx_type_6pysash_SashInputVec;
  if (PyType_Ready(&__pyx_type_6pysash_SashInputArray) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SashInputArray", (PyObject *)&__pyx_type_6pysash_SashInputArray) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pysash_SashInputArray = &__pyx_type_6pysash_SashInputArray;
  if (PyType_Ready(&__pyx_type_6pysash_WContainer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "WContainer", (PyObject *)&__pyx_type_6pysash_WContainer) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pysash_WContainer = &__pyx_type_6pysash_WContainer;
  if (PyType_Ready(&__pyx_type_6pysash_SashInputVecPython) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SashInputVecPython", (PyObject *)&__pyx_type_6pysash_SashInputVecPython) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pysash_SashInputVecPython = &__pyx_type_6pysash_SashInputVecPython;
  if (PyType_Ready(&__pyx_type_6pysash_SashInputArrayPython) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SashInputArrayPython", (PyObject *)&__pyx_type_6pysash_SashInputArrayPython) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pysash_SashInputArrayPython = &__pyx_type_6pysash_SashInputArrayPython;
  if (PyType_Ready(&__pyx_type_6pysash_Sash) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Sash", (PyObject *)&__pyx_type_6pysash_Sash) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pysash_Sash = &__pyx_type_6pysash_Sash;
  __pyx_type_6pysash_GenericSash.tp_base = __pyx_ptype_6pysash_Sash;
  if (PyType_Ready(&__pyx_type_6pysash_GenericSash) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "GenericSash", (PyObject *)&__pyx_type_6pysash_GenericSash) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pysash_GenericSash = &__pyx_type_6pysash_GenericSash;
  /*--- Type import code ---*/
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr)); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject)); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "/home/tranx/workspace/test-jfli/pycvfext/wrappers/pysash/pysash.pyx":52
 * """
 * 
 * import numpy             # <<<<<<<<<<<<<<
 * cimport numpy
 * 
 */
  __pyx_1 = __Pyx_Import(__pyx_kp_numpy, 0); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_kp_numpy, __pyx_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_1); __pyx_1 = 0;

  /* "/usr/local/lib/python2.6/dist-packages/Cython-0.11.2-py2.6-linux-x86_64.egg/Cython/Includes/stdlib.pxd":2
 * 
 * cdef extern from "stdlib.h" nogil:             # <<<<<<<<<<<<<<
 *     void free(void *ptr)
 *     void *malloc(size_t size)
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_1);
  __Pyx_AddTraceback("pysash");
  Py_DECREF(__pyx_m); __pyx_m = 0;
  __pyx_L0:;
  __Pyx_FinishRefcountContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

static const char *__pyx_filenames[] = {
  "pysash.pyx",
  "numpy.pxd",
};

/* Runtime support code */

static void __pyx_init_filenames(void) {
  __pyx_f = __pyx_filenames;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}


static int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (obj == Py_None || PyObject_TypeCheck(obj, type))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %s to %s",
        Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
    PyObject *__import__ = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    __import__ = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!__import__)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    module = PyObject_CallFunctionObjArgs(__import__,
        name, global_dict, empty_dict, list, NULL);
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(__import__);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

static INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

#if PY_MAJOR_VERSION >= 3
    /* Note: this is a temporary work-around to prevent crashes in Python 3.0 */
    if ((tstate->exc_type != NULL) & (tstate->exc_type != Py_None)) {
        tmp_type = tstate->exc_type;
        tmp_value = tstate->exc_value;
        tmp_tb = tstate->exc_traceback;
        PyErr_NormalizeException(&type, &value, &tb);
        PyErr_NormalizeException(&tmp_type, &tmp_value, &tmp_tb);
        tstate->exc_type = 0;
        tstate->exc_value = 0;
        tstate->exc_traceback = 0;
        PyException_SetContext(value, tmp_value);
        Py_DECREF(tmp_type);
        Py_XDECREF(tmp_tb);
    }
#endif

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


static INLINE int __Pyx_StrEq(const char *s1, const char *s2) {
     while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
     return *s1 == *s2;
}

static INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (unsigned char)-1;
            if (unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned char");
                return (unsigned char)-1;
            }
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to unsigned char");
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (unsigned short)-1;
            if (unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned short");
                return (unsigned short)-1;
            }
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to unsigned short");
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (unsigned int)-1;
            if (unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned int");
                return (unsigned int)-1;
            }
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to unsigned int");
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (char)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to char");
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (short)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to short");
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (int)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to int");
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (signed char)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to signed char");
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (signed short)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to signed short");
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (unlikely(val == -1 && PyErr_Occurred()))
                return (signed int)-1;
            PyErr_SetString(PyExc_OverflowError,
                           "value too large to convert to signed int");
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        if (unlikely(Py_SIZE(x) < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return PyLong_AsUnsignedLong(x);
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        if (unlikely(Py_SIZE(x) < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return PyLong_AsUnsignedLongLong(x);
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (long)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLong(x);
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLongLong(x);
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLong(x);
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_CheckExact(x) || PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_CheckExact(x) || PyLong_Check(x))) {
        return PyLong_AsLongLong(x);
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    long size)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;

    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(class_name);
    #else
    py_name = PyUnicode_FromString(class_name);
    #endif
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError, 
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
    if (((PyTypeObject *)result)->tp_basicsize != size) {
        PyErr_Format(PyExc_ValueError, 
            "%s.%s does not appear to be the correct type object",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;

    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(name);
    #else
    py_name = PyUnicode_FromString(name);
    #endif
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyObject *empty_string = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    #if PY_MAJOR_VERSION < 3
    empty_string = PyString_FromStringAndSize("", 0);
    #else
    empty_string = PyBytes_FromStringAndSize("", 0);
    #endif
    if (!empty_string) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        empty_string, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        empty_string  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(empty_string);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode && (!t->is_identifier)) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_identifier || (t->is_unicode && t->intern)) {
            *t->p = PyUnicode_InternFromString(t->s);
        } else if (t->is_unicode) {
            *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   if (x == Py_True) return 1;
   else if ((x == Py_False) | (x == Py_None)) return 0;
   else return PyObject_IsTrue(x);
}

static INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


